/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
extern  __attribute__((__nothrow__)) void *calloc(size_t __nmemb ,
                                                  size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
void execute(short *vector ) 
{ unsigned int i ;
  
  {/*sid:1*/
  i = 0U;
  /*sid:1*/
  /*T(execute) = G(vector)*/
  /*T(vector) = G(vector)*/
  /*T(i) = U*/
  
  /*sid:2*/
  while (i < 3U) {/*sid:6*/
    switch ((int )i) {/*sid:7*/
    case 2: ;
    /*sid:8*/
    free((void *)vector);
    /*sid:9*/
    break;
    /*sid:10*/
    default: ;
    /*sid:11*/
    printf((char const   *)"%d ", *(vector + i));
    /*sid:12*/
    break;}
    
    /*sid:13*/
    i ++;}
  
  /*sid:14*/
  free((void *)vector);
  /*sid:25*/
  return;
  /*sid:25*/
  /*T(execute) = U*/
  }

}
int main(int argc , char **argv ) 
{ short *vector ;
  int __retres ;
  
  {/*sid:16*/
  vector = (short *)((void *)0);
  /*sid:16*/
  /*T(main) = G(argc) + G(argv)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(vector) = U*/
  /*T(__retres) = U*/
  
  /*sid:17*/
  vector = (short *)calloc(3U, sizeof(short ));
  /*sid:18*/
  if (! vector) {/*sid:20*/
    printf((char const   *)"Allocation error!\n");
    /*sid:21*/
    __retres = 0;
    /*sid:26*/
    goto return_label;}
  
  /*sid:22*/
  execute(vector);
  /*sid:23*/
  printf((char const   *)"\n");
  /*sid:24*/
  __retres = 0;
  /*sid:27*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:27*/
  /*T(main) = U*/
  }

}
