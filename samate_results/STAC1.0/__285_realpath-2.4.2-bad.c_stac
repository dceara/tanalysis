/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef unsigned long long __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long __ino_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long __off_t;
typedef long __time_t;
typedef long __blksize_t;
typedef long __blkcnt_t;
typedef __uid_t uid_t;
struct __anonstruct___sigset_t_8 {
   unsigned long __val[1024U / (8U * sizeof(unsigned long ))] ;
};
typedef struct __anonstruct___sigset_t_8 __sigset_t;
typedef __sigset_t sigset_t;
struct timespec {
   __time_t tv_sec ;
   long tv_nsec ;
};
struct stat {
   __dev_t st_dev ;
   unsigned short __pad1 ;
   __ino_t st_ino ;
   __mode_t st_mode ;
   __nlink_t st_nlink ;
   __uid_t st_uid ;
   __gid_t st_gid ;
   __dev_t st_rdev ;
   unsigned short __pad2 ;
   __off_t st_size ;
   __blksize_t st_blksize ;
   __blkcnt_t st_blocks ;
   struct timespec st_atim ;
   struct timespec st_mtim ;
   struct timespec st_ctim ;
   unsigned long __unused4 ;
   unsigned long __unused5 ;
};
extern int printf(char const   * __restrict  __format  , ...) ;
extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict  __dest ,
                                                  char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
extern  __attribute__((__nothrow__)) char *strcat(char * __restrict  __dest ,
                                                  char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
extern  __attribute__((__nothrow__)) int strcmp(char const   *__s1 ,
                                                char const   *__s2 )  __attribute__((__pure__,
__nonnull__(1,2))) ;
extern  __attribute__((__nothrow__)) int strncmp(char const   *__s1 ,
                                                 char const   *__s2 ,
                                                 size_t __n )  __attribute__((__pure__,
__nonnull__(1,2))) ;
extern  __attribute__((__nothrow__)) char *strchr(char const   *__s , int __c )  __attribute__((__pure__,
__nonnull__(1))) ;
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
extern  __attribute__((__nothrow__)) char *getcwd(char *__buf , size_t __size ) ;
extern  __attribute__((__nothrow__)) __uid_t geteuid(void) ;
extern  __attribute__((__nothrow__)) int seteuid(__uid_t __uid ) ;
extern  __attribute__((__nothrow__)) int sigemptyset(sigset_t *__set )  __attribute__((__nonnull__(1))) ;
extern  __attribute__((__nothrow__)) int sigaddset(sigset_t *__set ,
                                                   int __signo )  __attribute__((__nonnull__(1))) ;
extern  __attribute__((__nothrow__)) int sigprocmask(int __how ,
                                                     sigset_t const   * __restrict  __set ,
                                                     sigset_t * __restrict  __oset ) ;
extern  __attribute__((__nothrow__)) int stat(char const   * __restrict  __file ,
                                              struct stat * __restrict  __buf )  __attribute__((__nonnull__(1,2))) ;
static sigset_t saved_sigmask ;
static sigset_t block_sigmask ;
static int delaying ;
static int init_done ;
static void init_mask(void) 
{ int sig ;
  
  {/*sid:1*/
  init_done = 1;
  /*sid:1*/
  /*T(init_mask) = G(delaying) + G(saved_sigmask) + G(block_sigmask) + G(init_done)*/
  /*T(sig) = U*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = U*/
  
  /*sid:2*/
  sigemptyset(& block_sigmask);
  /*sid:3*/
  sig = 1;
  /*sid:4*/
  while (sig < 65) {/*sid:8*/
    sigaddset(& block_sigmask, sig);
    /*sid:9*/
    sig ++;}
  
  /*sid:252*/
  return;
  /*sid:252*/
  /*T(init_mask) = U*/
  }

}
int enable_signaling(void) 
{ int tmp ;
  int __retres ;
  
  {/*sid:12*/
  if (delaying != 0) {/*sid:13*/
    delaying = 0;
    /*sid:14*/
    tmp = sigprocmask(2, (sigset_t const   *)(& saved_sigmask),
                      (sigset_t *)((sigset_t *)0));
    /*sid:14*/
    /*T(tmp) = G(delaying)*/
    
    /*sid:15*/
    if (tmp < 0) {/*sid:16*/
      __retres = -1;
      /*sid:16*/
      /*T(__retres) = G(delaying)*/
      
      /*sid:253*/
      goto return_label;}
    }
  
  /*sid:12*/
  /*T(enable_signaling) = G(delaying) + G(saved_sigmask) + G(block_sigmask) + G(init_done)*/
  /*T(tmp) = U*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  /*T(__retres) = U*/
  
  /*sid:19*/
  __retres = 0;
  /*sid:19*/
  /*T(tmp) = G(delaying)*/
  /*T(__retres) = G(delaying)*/
  
  /*sid:254*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:254*/
  /*T(enable_signaling) = G(delaying)*/
  }

}
int delay_signaling(void) 
{ int tmp ;
  int __retres ;
  
  {/*sid:21*/
  if (init_done == 0) {/*sid:22*/
    init_mask();}
  
  /*sid:21*/
  /*T(delay_signaling) = G(delaying) + G(saved_sigmask) + G(block_sigmask) + G(init_done)*/
  /*T(tmp) = U*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  /*T(__retres) = U*/
  
  /*sid:25*/
  if (delaying == 0) {/*sid:26*/
    delaying = 1;
    /*sid:27*/
    tmp = sigprocmask(0, (sigset_t const   *)(& block_sigmask),
                      (sigset_t *)(& saved_sigmask));
    /*sid:27*/
    /*T(tmp) = G(delaying)*/
    
    /*sid:28*/
    if (tmp < 0) {/*sid:29*/
      __retres = -1;
      /*sid:29*/
      /*T(__retres) = G(delaying)*/
      
      /*sid:255*/
      goto return_label;}
    }
  
  /*sid:32*/
  __retres = 0;
  /*sid:32*/
  /*T(tmp) = G(delaying)*/
  /*T(__retres) = G(delaying)*/
  
  /*sid:256*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:256*/
  /*T(delay_signaling) = G(delaying)*/
  }

}
char *my_realpath(char const   *pathname , char *result , char *chroot_path ) 
{ struct stat sbuf ;
  char canary[5] ;
  char curpath[46] ;
  char workpath[46] ;
  char namebuf[46] ;
  char *where ;
  char *ptr ;
  char *last ;
  uid_t userid ;
  int resultcode ;
  size_t tmp ;
  uid_t userid_0 ;
  char *tmp_0 ;
  char *tmp_1 ;
  int tmp_2 ;
  int tmp_3 ;
  int tmp_4 ;
  size_t tmp_5 ;
  char *__retres ;
  
  {/*sid:33*/
  canary[0] = (char )'G';
  /*sid:33*/
  /*T(my_realpath) = G(delaying) + G(saved_sigmask) + G(result) + G(pathname) + G(chroot_path) + G(block_sigmask) + G(init_done)*/
  /*T(pathname) = G(pathname)*/
  /*T(result) = G(result)*/
  /*T(chroot_path) = G(chroot_path)*/
  /*T(sbuf) = U*/
  /*T(canary) = U*/
  /*T(curpath) = U*/
  /*T(workpath) = U*/
  /*T(namebuf) = U*/
  /*T(where) = U*/
  /*T(ptr) = U*/
  /*T(last) = U*/
  /*T(userid) = U*/
  /*T(resultcode) = U*/
  /*T(tmp) = U*/
  /*T(userid_0) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  /*T(__retres) = U*/
  
  /*sid:34*/
  canary[1] = (char )'O';
  /*sid:35*/
  canary[2] = (char )'O';
  /*sid:36*/
  canary[3] = (char )'D';
  /*sid:37*/
  canary[4] = (char )'\000';
  /*sid:39*/
  if (result == (void *)0) {/*sid:40*/
    __retres = (char *)((void *)0);
    /*sid:40*/
    /*T(__retres) = G(result)*/
    
    /*sid:257*/
    goto return_label;}
  
  /*sid:43*/
  if (pathname == (void *)0) {/*sid:44*/
    *result = (char )'\000';
    /*sid:44*/
    /*T(result) = G(pathname) + G(result)*/
    
    /*sid:45*/
    __retres = (char *)((void *)0);
    /*sid:45*/
    /*T(__retres) = G(pathname) + G(result)*/
    
    /*sid:258*/
    goto return_label;}
  
  /*sid:47*/
  printf((char const   *)"MY_REALPATH: pathname passed in = %s\n", pathname);
  /*sid:47*/
  /*T(saved_sigmask) = G(pathname)*/
  /*T(block_sigmask) = G(pathname)*/
  /*T(delaying) = G(pathname)*/
  /*T(init_done) = G(pathname)*/
  
  /*sid:48*/
  tmp = strlen(pathname);
  /*sid:48*/
  /*T(tmp) = G(pathname) + G(result)*/
  
  /*sid:49*/
  printf((char const   *)"strcpy(curpath, pathname):Copying %d bytes into an array of size %d\n",
         tmp, sizeof(curpath));
  /*sid:49*/
  /*T(saved_sigmask) = G(pathname) + G(result)*/
  /*T(block_sigmask) = G(pathname) + G(result)*/
  /*T(delaying) = G(pathname) + G(result)*/
  /*T(init_done) = G(pathname) + G(result)*/
  
  /*sid:50*/
  strcpy((char *)(curpath), (char const   *)pathname);
  /*sid:50*/
  /*T(curpath) = G(pathname)*/
  
  /*sid:51*/
  printf((char const   *)"canary=[%s]\n", canary);
  /*sid:51*/
  /*T(saved_sigmask) = U*/
  /*T(block_sigmask) = U*/
  /*T(delaying) = U*/
  /*T(init_done) = U*/
  
  /*sid:53*/
  if ((int const   )*pathname != '/')
  {/*sid:54*/
  tmp_1 = getcwd(workpath, 46U);
  /*sid:54*/
  /*T(tmp_1) = T*/
  
  /*sid:55*/
  if (! tmp_1) {/*sid:57*/
    userid_0 = geteuid();
    /*sid:57*/
    /*T(userid_0) = T*/
    
    /*sid:58*/
    delay_signaling();
    /*sid:59*/
    seteuid(0U);
    /*sid:60*/
    tmp_0 = getcwd(workpath, 46U);
    /*sid:60*/
    /*T(tmp_0) = T*/
    
    /*sid:61*/
    if (! tmp_0) {/*sid:63*/
      strcpy((char *)result, (char const   *)".");
      /*sid:63*/
      /*T(result) = U*/
      
      /*sid:64*/
      seteuid(userid_0);
      /*sid:65*/
      enable_signaling();
      /*sid:66*/
      __retres = (char *)((void *)0);
      /*sid:66*/
      /*T(__retres) = T*/
      
      /*sid:259*/
      goto return_label;}
    
    /*sid:67*/
    seteuid(userid_0);
    /*sid:68*/
    enable_signaling();}
  }
  else {/*sid:69*/
  workpath[0] = (char )'\000';
  /*sid:69*/
  /*T(workpath) = G(pathname) + G(result)*/
  /*T(userid_0) = T*/
  /*T(tmp_0) = T*/
  /*T(tmp_1) = T*/
  }
  
  /*sid:70*/
  where = curpath;
  /*sid:70*/
  /*T(workpath) = G(pathname) + G(result)*/
  /*T(where) = T*/
  /*T(userid_0) = T*/
  /*T(tmp_0) = T*/
  
  /*sid:71*/
  while ((int )*where != '\000') {/*sid:75*/
    tmp_2 = strcmp((char const   *)where, ".");
    /*sid:76*/
    if (! tmp_2) {/*sid:78*/
      where ++;
      /*sid:79*/
      continue;}
    
    /*sid:80*/
    tmp_3 = strncmp((char const   *)where, "./", 2U);
    /*sid:81*/
    if (! tmp_3) {/*sid:83*/
      where += 2;
      /*sid:84*/
      continue;}
    
    /*sid:85*/
    tmp_4 = strncmp((char const   *)where, "../", 3U);
    /*sid:86*/
    if (! tmp_4) {/*sid:88*/
      where += 3;
      /*sid:89*/
      {/*sid:90*/
       last = workpath;
       /*sid:91*/
       ptr = last;}
      /*sid:92*/
      while ((int )*ptr != '\000') {/*sid:97*/
        if ((int )*ptr == '/') {/*sid:98*/
          last = ptr;}
        
        /*sid:100*/
        ptr ++;}
      
      /*sid:101*/
      *last = (char )'\000';
      /*sid:102*/
      continue;}
    
    /*sid:103*/
    ptr = strchr((char const   *)where, '/');
    /*sid:105*/
    if (ptr == (char *)((void *)0))
    {/*sid:106*/
    {/*sid:107*/
     tmp_5 = strlen((char const   *)where);
     /*sid:108*/
     ptr = (where + tmp_5) - 1;}}
    else {/*sid:109*/
    *ptr = (char )'\000';}
    
    /*sid:110*/
    strcpy((char *)(namebuf), (char const   *)(workpath));
    /*sid:111*/
    last = namebuf;
    /*sid:112*/
    while (*last) {/*sid:116*/
      goto __Cont;
      /*sid:117*/
      __Cont: /* CIL Label */ ;
      /*sid:118*/
      last ++;}
    
    /*sid:120*/
    if (last == namebuf)
    {/*sid:121*/
    strcat((char *)(namebuf), (char const   *)"/");
    /*sid:122*/
    printf((char const   *)"canary=[%s]\n", canary);
    /*sid:122*/
    /*T(saved_sigmask) = U*/
    /*T(block_sigmask) = U*/
    /*T(delaying) = U*/
    /*T(init_done) = U*/
    }
    else {/*sid:123*/
    {/*sid:124*/
     last --;
     /*sid:125*/
     }
    /*sid:126*/
    if ((int )*last != '/') {/*sid:127*/
      strcat((char *)(namebuf), (char const   *)"/");
      /*sid:128*/
      printf((char const   *)"canary=[%s]\n", canary);}
    }
    
    /*sid:130*/
    strcat((char *)(namebuf), (char const   *)where);
    /*sid:130*/
    /*T(saved_sigmask) = G(saved_sigmask)*/
    /*T(block_sigmask) = G(block_sigmask)*/
    /*T(delaying) = G(delaying)*/
    /*T(init_done) = G(init_done)*/
    
    /*sid:131*/
    printf((char const   *)"canary=[%s]\n", canary);
    /*sid:131*/
    /*T(saved_sigmask) = U*/
    /*T(block_sigmask) = U*/
    /*T(delaying) = U*/
    /*T(init_done) = U*/
    
    /*sid:132*/
    {/*sid:133*/
     ptr ++;
     /*sid:134*/
     where = ptr;}
    /*sid:135*/
    userid = geteuid();
    /*sid:136*/
    delay_signaling();
    /*sid:137*/
    seteuid(0U);
    /*sid:138*/
    resultcode = stat((char const   *)(namebuf), (struct stat *)(& sbuf));
    /*sid:139*/
    seteuid(userid);
    /*sid:140*/
    enable_signaling();
    /*sid:142*/
    if (resultcode == -1) {/*sid:144*/
      if (chroot_path == (void *)0)
      {/*sid:145*/
      strcpy((char *)result, (char const   *)(namebuf));
      /*sid:145*/
      /*T(result) = T*/
      
      /*sid:146*/
      printf((char const   *)"canary=[%s]\n", canary);}
      else {/*sid:147*/
      strcpy((char *)result, (char const   *)chroot_path);
      /*sid:147*/
      /*T(result) = G(chroot_path)*/
      
      /*sid:148*/
      printf((char const   *)"canary=[%s]\n", canary);
      /*sid:150*/
      if ((int )namebuf[0] != '/')
      {/*sid:151*/
      strcat((char *)result, (char const   *)(namebuf));
      /*sid:151*/
      /*T(result) = T*/
      
      /*sid:152*/
      printf((char const   *)"canary=[%s]\n", canary);}
      else {/*sid:154*/
      if ((int )namebuf[1] != '\000') {/*sid:155*/
        ptr = result;
        /*sid:156*/
        while ((int )*ptr != '\000') {/*sid:161*/
          ptr ++;}
        
        /*sid:163*/
        if (ptr == result)
        {/*sid:164*/
        strcat((char *)result, (char const   *)(namebuf));
        /*sid:164*/
        /*T(result) = T*/
        
        /*sid:165*/
        printf((char const   *)"canary=[%s]\n", canary);}
        else {/*sid:166*/
        {/*sid:167*/
         ptr --;
         /*sid:168*/
         }
        /*sid:169*/
        if ((int )*ptr != '/')
        {/*sid:170*/
        strcat((char *)result, (char const   *)(namebuf));
        /*sid:170*/
        /*T(result) = T*/
        
        /*sid:171*/
        printf((char const   *)"canary=[%s]\n", canary);}
        else {/*sid:172*/
        strcat((char *)result, (char const   *)(& namebuf[1]));
        /*sid:172*/
        /*T(result) = T*/
        
        /*sid:173*/
        printf((char const   *)"canary=[%s]\n", canary);}
        }
        }
      }
      }
      
      /*sid:175*/
      __retres = (char *)((void *)0);
      /*sid:175*/
      /*T(result) = T*/
      /*T(__retres) = T*/
      
      /*sid:260*/
      goto return_label;}
    
    /*sid:178*/
    if ((sbuf.st_mode & 16384U) == 16384U) {/*sid:179*/
      strcpy((char *)(workpath), (char const   *)(namebuf));
      /*sid:180*/
      printf((char const   *)"canary=[%s]\n", canary);
      /*sid:181*/
      continue;}
    
    /*sid:184*/
    if (*where)
    {/*sid:186*/
    if (chroot_path == (void *)0)
    {/*sid:187*/
    strcpy((char *)result, (char const   *)(namebuf));
    /*sid:187*/
    /*T(result) = T*/
    
    /*sid:188*/
    printf((char const   *)"canary=[%s]\n", canary);}
    else {/*sid:189*/
    strcpy((char *)result, (char const   *)chroot_path);
    /*sid:189*/
    /*T(result) = G(chroot_path)*/
    
    /*sid:191*/
    if ((int )namebuf[0] != '/')
    {/*sid:192*/
    strcat((char *)result, (char const   *)(namebuf));
    /*sid:192*/
    /*T(result) = T*/
    
    /*sid:193*/
    printf((char const   *)"canary=[%s]\n", canary);}
    else {/*sid:195*/
    if ((int )namebuf[1] != '\000') {/*sid:196*/
      ptr = result;
      /*sid:197*/
      while ((int )*ptr != '\000') {/*sid:202*/
        ptr ++;}
      
      /*sid:204*/
      if (ptr == result)
      {/*sid:205*/
      strcat((char *)result, (char const   *)(namebuf));
      /*sid:205*/
      /*T(result) = T*/
      
      /*sid:206*/
      printf((char const   *)"canary=[%s]\n", canary);}
      else {/*sid:207*/
      {/*sid:208*/
       ptr --;
       /*sid:209*/
       }
      /*sid:210*/
      if ((int )*ptr != '/')
      {/*sid:211*/
      strcat((char *)result, (char const   *)(namebuf));
      /*sid:211*/
      /*T(result) = T*/
      
      /*sid:212*/
      printf((char const   *)"canary=[%s]\n", canary);}
      else {/*sid:213*/
      strcat((char *)result, (char const   *)(& namebuf[1]));
      /*sid:213*/
      /*T(result) = T*/
      
      /*sid:214*/
      printf((char const   *)"canary=[%s]\n", canary);}
      }
      }
    }
    }
    
    /*sid:216*/
    __retres = (char *)((void *)0);
    /*sid:216*/
    /*T(result) = T*/
    /*T(__retres) = T*/
    
    /*sid:261*/
    goto return_label;}
    else {/*sid:217*/
    strcpy((char *)(workpath), (char const   *)(namebuf));
    /*sid:218*/
    printf((char const   *)"canary=[%s]\n", canary);
    /*sid:218*/
    /*T(saved_sigmask) = G(saved_sigmask)*/
    /*T(block_sigmask) = G(block_sigmask)*/
    /*T(delaying) = G(delaying)*/
    /*T(init_done) = G(init_done)*/
    }
    }
  
  /*sid:71*/
  /*T(workpath) = T*/
  /*T(namebuf) = T*/
  /*T(ptr) = T*/
  /*T(last) = T*/
  /*T(userid) = T*/
  /*T(resultcode) = T*/
  /*T(tmp_2) = T*/
  /*T(tmp_3) = T*/
  /*T(tmp_4) = T*/
  /*T(tmp_5) = T*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  
  /*sid:220*/
  if (chroot_path == (void *)0)
  {/*sid:221*/
  strcpy((char *)result, (char const   *)(workpath));
  /*sid:221*/
  /*T(result) = T*/
  
  /*sid:222*/
  printf((char const   *)"canary=[%s]\n", canary);
  /*sid:222*/
  /*T(saved_sigmask) = U*/
  /*T(block_sigmask) = U*/
  /*T(delaying) = U*/
  /*T(init_done) = U*/
  }
  else {/*sid:223*/
  strcpy((char *)result, (char const   *)chroot_path);
  /*sid:223*/
  /*T(result) = G(chroot_path)*/
  
  /*sid:224*/
  printf((char const   *)"canary=[%s]\n", canary);
  /*sid:224*/
  /*T(saved_sigmask) = U*/
  /*T(block_sigmask) = U*/
  /*T(delaying) = U*/
  /*T(init_done) = U*/
  
  /*sid:226*/
  if ((int )workpath[0] != '/')
  {/*sid:227*/
  strcat((char *)result, (char const   *)(workpath));
  /*sid:227*/
  /*T(result) = T*/
  
  /*sid:228*/
  printf((char const   *)"canary=[%s]\n", canary);}
  else {/*sid:230*/
  if ((int )workpath[1] != '\000') {/*sid:231*/
    ptr = result;
    /*sid:232*/
    while ((int )*ptr != '\000') {/*sid:237*/
      ptr ++;}
    
    /*sid:239*/
    if (ptr == result)
    {/*sid:240*/
    strcat((char *)result, (char const   *)(workpath));
    /*sid:240*/
    /*T(result) = T*/
    
    /*sid:241*/
    printf((char const   *)"canary=[%s]\n", canary);}
    else {/*sid:242*/
    {/*sid:243*/
     ptr --;
     /*sid:244*/
     }
    /*sid:245*/
    if ((int )*ptr != '/')
    {/*sid:246*/
    strcat((char *)result, (char const   *)(workpath));
    /*sid:246*/
    /*T(result) = T*/
    
    /*sid:247*/
    printf((char const   *)"canary=[%s]\n", canary);}
    else {/*sid:248*/
    strcat((char *)result, (char const   *)(& workpath[1]));
    /*sid:248*/
    /*T(result) = T*/
    
    /*sid:249*/
    printf((char const   *)"canary=[%s]\n", canary);}
    }
    }
  }
  }
  
  /*sid:251*/
  __retres = result;
  /*sid:251*/
  /*T(result) = T*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  /*T(__retres) = T*/
  
  /*sid:262*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:262*/
  /*T(my_realpath) = T*/
  /*T(result) = T*/
  /*T(curpath) = G(pathname)*/
  /*T(workpath) = T*/
  /*T(namebuf) = T*/
  /*T(where) = T*/
  /*T(ptr) = T*/
  /*T(last) = T*/
  /*T(userid) = T*/
  /*T(resultcode) = T*/
  /*T(tmp) = G(pathname) + G(result)*/
  /*T(userid_0) = T*/
  /*T(tmp_0) = T*/
  /*T(tmp_1) = T*/
  /*T(tmp_2) = T*/
  /*T(tmp_3) = T*/
  /*T(tmp_4) = T*/
  /*T(tmp_5) = T*/
  /*T(saved_sigmask) = G(saved_sigmask)*/
  /*T(block_sigmask) = G(block_sigmask)*/
  /*T(delaying) = G(delaying)*/
  /*T(init_done) = G(init_done)*/
  /*T(__retres) = T*/
  }

}
