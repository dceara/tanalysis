/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
extern  __attribute__((__nothrow__)) int rand(void) ;
extern  __attribute__((__nothrow__)) void *calloc(size_t __nmemb ,
                                                  size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
void execute(short *vector ) 
{ unsigned int i ;
  int tmp ;
  
  {/*sid:1*/
  i = 0U;
  /*sid:1*/
  /*T(execute) = G(vector)*/
  /*T(vector) = G(vector)*/
  /*T(i) = U*/
  /*T(tmp) = U*/
  
  /*sid:2*/
  while (i < 3U) {/*sid:6*/
    {/*sid:7*/
     tmp = rand();
     /*sid:8*/
     *(vector + i) = (short )(tmp % 255);}
    /*sid:9*/
    switch ((int )i) {/*sid:10*/
    case 2: ;
    /*sid:11*/
    if (vector) {/*sid:12*/
      free((void *)vector);
      /*sid:13*/
      vector = (short *)((void *)0);}
    
    /*sid:15*/
    break;
    /*sid:16*/
    default: ;
    /*sid:17*/
    printf((char const   *)"%d ", *(vector + i));
    /*sid:18*/
    break;}
    
    /*sid:19*/
    i ++;}
  
  /*sid:2*/
  /*T(vector) = T*/
  /*T(tmp) = T*/
  
  /*sid:21*/
  if (vector) {/*sid:22*/
    free((void *)vector);}
  
  /*sid:34*/
  return;
  /*sid:34*/
  /*T(execute) = U*/
  }

}
int main(int argc , char **argv ) 
{ short *vector ;
  int __retres ;
  
  {/*sid:25*/
  vector = (short *)((void *)0);
  /*sid:25*/
  /*T(main) = G(argc) + G(argv)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(vector) = U*/
  /*T(__retres) = U*/
  
  /*sid:26*/
  vector = (short *)calloc(3U, sizeof(short ));
  /*sid:27*/
  if (! vector) {/*sid:29*/
    printf((char const   *)"Allocation error!\n");
    /*sid:30*/
    __retres = 0;
    /*sid:35*/
    goto return_label;}
  
  /*sid:31*/
  execute(vector);
  /*sid:31*/
  /*T(vector) = T*/
  
  /*sid:32*/
  printf((char const   *)"\n");
  /*sid:33*/
  __retres = 0;
  /*sid:36*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:36*/
  /*T(main) = U*/
  /*T(vector) = T*/
  }

}
