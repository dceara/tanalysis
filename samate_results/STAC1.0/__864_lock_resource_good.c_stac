/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
typedef long __clock_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
typedef __clock_t clock_t;
extern int fclose(FILE *__stream ) ;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern  __attribute__((__nothrow__)) int sprintf(char * __restrict  __s ,
                                                 char const   * __restrict  __format 
                                                 , ...) ;
extern int fputc(int __c , FILE *__stream ) ;
extern int fputs(char const   * __restrict  __s , FILE * __restrict  __stream ) ;
extern  __attribute__((__nothrow__,
__noreturn__)) void exit(int __status ) ;
extern  __attribute__((__nothrow__)) clock_t clock(void) ;
static char const   logFileName[11]  =   
                                         {(char const   )'a',
                                          (char const   )'c',
                                          (char const   )'c',
                                          (char const   )'e',
                                          (char const   )'s',
                                          (char const   )'s',
                                          (char const   )'.',
                                          (char const   )'l',
                                          (char const   )'o',
                                          (char const   )'g',
                                          (char const   )'\000'};
static FILE *logFile  = (FILE *)((void *)0);
int main(int argc , char **argv ) 
{ _Bool writeLog ;
  unsigned int i ;
  char newFileName[256] ;
  clock_t suffix ;
  int __retres ;
  
  {/*sid:1*/
  writeLog = (_Bool)1;
  /*sid:1*/
  /*T(main) = G(logFileName) + G(argc) + G(argv) + G(logFile)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(writeLog) = U*/
  /*T(i) = U*/
  /*T(newFileName) = U*/
  /*T(suffix) = U*/
  /*T(logFileName) = G(logFileName)*/
  /*T(logFile) = G(logFile)*/
  /*T(__retres) = U*/
  
  /*sid:2*/
  logFile = fopen((char const   *)(logFileName), (char const   *)"a");
  /*sid:2*/
  /*T(logFile) = U*/
  
  /*sid:3*/
  if (! logFile) {/*sid:4*/
    writeLog = 0;
    /*sid:5*/
    i = 0U;
    /*sid:6*/
    while (i < 10U) {/*sid:10*/
      newFileName[0] = (char )'\000';
      /*sid:11*/
      suffix = clock();
      /*sid:12*/
      sprintf((char *)(newFileName), (char const   *)"access.%d.log", suffix);
      /*sid:12*/
      /*T(logFile) = T*/
      
      /*sid:13*/
      logFile = fopen((char const   *)(newFileName), (char const   *)"a");
      /*sid:13*/
      /*T(logFile) = U*/
      
      /*sid:14*/
      if (logFile) {/*sid:15*/
        writeLog = 1;
        /*sid:16*/
        break;}
      
      /*sid:18*/
      i ++;}
    
    /*sid:6*/
    /*T(suffix) = T*/
    /*T(logFileName) = T*/
    
    /*sid:19*/
    if (! writeLog) {/*sid:20*/
      exit(1);}
    }
  
  /*sid:24*/
  if (writeLog) {/*sid:25*/
    fputs((char const   *)"Action 1", (FILE *)logFile);
    /*sid:26*/
    fputc('\n', logFile);}
  
  /*sid:24*/
  /*T(suffix) = T*/
  /*T(logFileName) = T*/
  
  /*sid:30*/
  if (writeLog) {/*sid:31*/
    fputs((char const   *)"Action 2", (FILE *)logFile);
    /*sid:32*/
    fputc('\n', logFile);}
  
  /*sid:35*/
  fclose(logFile);
  /*sid:36*/
  __retres = 0;
  /*sid:37*/
  return (__retres);
  /*sid:37*/
  /*T(main) = U*/
  }

}
