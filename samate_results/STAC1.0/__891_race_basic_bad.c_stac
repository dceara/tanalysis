/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
typedef int __pid_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
typedef __pid_t pid_t;
extern struct _IO_FILE *stdout ;
extern int fclose(FILE *__stream ) ;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern int fprintf(FILE * __restrict  __stream ,
                   char const   * __restrict  __format  , ...) ;
extern int printf(char const   * __restrict  __format  , ...) ;
extern size_t fwrite(void const   * __restrict  __ptr , size_t __size ,
                     size_t __n , FILE * __restrict  __s ) ;
extern  __attribute__((__nothrow__)) __pid_t fork(void) ;
char const   fName[10]  =   
                            {(char const   )'t', (char const   )'e',
                             (char const   )'s', (char const   )'t',
                             (char const   )'.', (char const   )'f',
                             (char const   )'i', (char const   )'l',
                             (char const   )'e', (char const   )'\000'};
char const   string[21]  =   
                             {(char const   )'W', (char const   )'h',
                              (char const   )'a', (char const   )'t',
                              (char const   )' ', (char const   )'I',
                              (char const   )' ', (char const   )'w',
                              (char const   )'a', (char const   )'n',
                              (char const   )'t', (char const   )' ',
                              (char const   )'t', (char const   )'o',
                              (char const   )' ', (char const   )'w',
                              (char const   )'r', (char const   )'i',
                              (char const   )'t', (char const   )'e',
                              (char const   )'\000'};
void handler(int curPid ) 
{ FILE *fp ;
  
  {/*sid:1*/
  fprintf((FILE *)stdout, (char const   *)"(%d) Start handler...\n", curPid);
  /*sid:1*/
  /*T(handler) = G(fName) + G(curPid) + G(string)*/
  /*T(stdout) = T*/
  /*T(fName) = G(curPid)*/
  /*T(string) = G(curPid)*/
  /*T(curPid) = G(curPid)*/
  /*T(fp) = U*/
  
  /*sid:2*/
  fp = (FILE *)((void *)0);
  /*sid:3*/
  fp = fopen((char const   *)(fName), (char const   *)"wb");
  /*sid:4*/
  if (fp != (FILE *)((void *)0)) {/*sid:5*/
    fwrite((void const   *)((void *)(string)), sizeof(char ), 20U, (FILE *)fp);
    /*sid:6*/
    fclose(fp);}
  
  /*sid:8*/
  fprintf((FILE *)stdout, (char const   *)"(%d) Stop handler...\n", curPid);
  /*sid:28*/
  return;
  /*sid:28*/
  /*T(handler) = U*/
  }

}
int main(int argc , char **argv ) 
{ pid_t pid ;
  __pid_t tmp ;
  unsigned int i ;
  int __retres ;
  
  {/*sid:10*/
  pid = 0;
  /*sid:10*/
  /*T(main) = G(fName) + G(argc) + G(argv) + G(string)*/
  /*T(fName) = G(fName)*/
  /*T(string) = G(string)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(pid) = U*/
  /*T(tmp) = U*/
  /*T(i) = U*/
  /*T(__retres) = U*/
  
  /*sid:11*/
  tmp = fork();
  /*sid:12*/
  if (tmp) {/*sid:13*/
    __retres = 0;
    /*sid:29*/
    goto return_label;}
  
  /*sid:15*/
  i = 0U;
  /*sid:16*/
  while (i < 3U) {/*sid:20*/
    pid = fork();
    /*sid:22*/
    if (pid) {/*sid:23*/
      printf((char const   *)"Run: %d\n", pid);
      /*sid:23*/
      /*T(fName) = U*/
      /*T(string) = U*/
      
      /*sid:24*/
      handler(pid);
      /*sid:24*/
      /*T(fName) = G(fName)*/
      /*T(string) = G(string)*/
      }
    
    /*sid:26*/
    i ++;}
  
  /*sid:27*/
  __retres = 0;
  /*sid:30*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:30*/
  /*T(main) = U*/
  }

}
