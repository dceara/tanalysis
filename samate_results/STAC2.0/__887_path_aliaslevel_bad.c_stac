/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
extern int fclose(FILE *__stream ) ;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
extern char *fgets(char * __restrict  __s , int __n ,
                   FILE * __restrict  __stream ) ;
extern  __attribute__((__nothrow__)) void *malloc(size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
extern  __attribute__((__nothrow__)) char *strncpy(char * __restrict  __dest ,
                                                   char const   * __restrict  __src ,
                                                   size_t __n )  __attribute__((__nonnull__(1,2))) ;
char **fileNames  = (char **)((void *)0);
int printFile(char const   *fileName ) 
{ FILE *fp ;
  char buffer[512] ;
  unsigned int lNumber ;
  char *tmp ;
  int __retres ;
  
  {/*sid:1*/
  fp = (FILE *)((void *)0);
  /*sid:1*/
  /*T(printFile) = G(fileName) + G(fileNames)*/
  /*T(fileNames) = G(fileNames)*/
  /*T(fileName) = G(fileName)*/
  /*T(fp) = U*/
  /*T(buffer) = U*/
  /*T(lNumber) = U*/
  /*T(tmp) = U*/
  /*T(__retres) = U*/
  
  /*sid:2*/
  fp = fopen((char const   *)fileName, (char const   *)"r");
  /*sid:3*/
  if (fp) {/*sid:4*/
    lNumber = 0U;
    /*sid:5*/
    printf((char const   *)">>> %s\n", fileName);
    /*sid:5*/
    /*T(fileNames) = G(fileName)*/
    
    /*sid:6*/
    while (1) {/*sid:7*/
      tmp = fgets((char *)(buffer), 512, (FILE *)fp);
      /*sid:8*/
      if (! tmp) {/*sid:9*/
        break;}
      
      /*sid:10*/
      lNumber ++;
      /*sid:11*/
      printf((char const   *)"%3d: %s", lNumber, buffer);}
    
    /*sid:6*/
    /*T(fileNames) = T*/
    /*T(buffer) = T*/
    /*T(lNumber) = T*/
    /*T(tmp) = T*/
    
    /*sid:12*/
    fclose(fp);
    /*sid:13*/
    __retres = 0;
    /*sid:59*/
    goto return_label;}
  
  /*sid:15*/
  __retres = 1;
  /*sid:15*/
  /*T(fileNames) = T*/
  /*T(buffer) = T*/
  /*T(lNumber) = T*/
  /*T(tmp) = T*/
  
  /*sid:60*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:60*/
  /*T(printFile) = U*/
  }

}
int main(int argc , char **argv ) 
{ short badAlloc ;
  unsigned int nbArgs ;
  unsigned int i ;
  char *tmp_0 ;
  unsigned int i_0 ;
  int tmp_2 ;
  unsigned int i_1 ;
  int __retres ;
  
  {/*sid:16*/
  badAlloc = (short)0;
  /*sid:16*/
  /*T(main) = G(argv) + G(argc) + G(fileNames)*/
  /*T(fileNames) = G(fileNames)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(badAlloc) = U*/
  /*T(nbArgs) = U*/
  /*T(i) = U*/
  /*T(tmp_0) = U*/
  /*T(i_0) = U*/
  /*T(tmp_2) = U*/
  /*T(i_1) = U*/
  /*T(__retres) = U*/
  
  /*sid:18*/
  if (argc > 1) {/*sid:20*/
    nbArgs = (unsigned int )(argc - 1);
    /*sid:20*/
    /*T(nbArgs) = G(argc)*/
    
    /*sid:21*/
    fileNames = (char **)malloc(nbArgs * sizeof(char **));
    /*sid:21*/
    /*T(fileNames) = G(argc)*/
    
    /*sid:22*/
    if (fileNames == (void *)0) {/*sid:23*/
      __retres = 0;
      /*sid:23*/
      /*T(__retres) = G(argc)*/
      
      /*sid:61*/
      goto return_label;}
    
    /*sid:25*/
    i = 0U;
    /*sid:25*/
    /*T(i) = G(argc)*/
    
    /*sid:26*/
    while (i < nbArgs) {/*sid:30*/
      {/*sid:31*/
       tmp_0 = (char *)malloc(256U * sizeof(char ));
       /*sid:32*/
       *(fileNames + i) = tmp_0;}
      /*sid:33*/
      if (tmp_0)
      {/*sid:34*/
      strncpy((char *)*(fileNames + i), (char const   *)*(argv + (i + 1U)),
              255U);}
      else {/*sid:35*/
      badAlloc = (short)1;}
      
      /*sid:36*/
      i ++;}
    
    /*sid:26*/
    /*T(badAlloc) = G(argc)*/
    /*T(tmp_0) = G(argc)*/
    
    /*sid:37*/
    if (! badAlloc) {/*sid:38*/
      i_0 = 0U;
      /*sid:38*/
      /*T(i_0) = G(argc)*/
      
      /*sid:39*/
      while (i_0 < nbArgs) {/*sid:43*/
        tmp_2 = printFile((char const   *)*(fileNames + i_0));
        /*sid:44*/
        if (tmp_2) {/*sid:45*/
          printf((char const   *)"Argument error, the given argument is not a readable file (%s).\n",
                 *(fileNames + i_0));}
        
        /*sid:47*/
        i_0 ++;}
      
      /*sid:39*/
      /*T(fileNames) = T*/
      /*T(tmp_2) = G(argc)*/
      }
    
    /*sid:49*/
    i_1 = 0U;
    /*sid:49*/
    /*T(fileNames) = T*/
    /*T(i_0) = G(argc)*/
    /*T(tmp_2) = G(argc)*/
    /*T(i_1) = G(argc)*/
    
    /*sid:50*/
    while (i_1 < nbArgs) {/*sid:54*/
      free((void *)*(fileNames + i_1));
      /*sid:55*/
      i_1 ++;}
    
    /*sid:56*/
    free((void *)fileNames);}
  
  /*sid:58*/
  __retres = 0;
  /*sid:58*/
  /*T(fileNames) = T*/
  /*T(badAlloc) = G(argc)*/
  /*T(nbArgs) = G(argc)*/
  /*T(i) = G(argc)*/
  /*T(tmp_0) = G(argc)*/
  /*T(i_0) = G(argc)*/
  /*T(tmp_2) = G(argc)*/
  /*T(i_1) = G(argc)*/
  /*T(__retres) = G(argc)*/
  
  /*sid:62*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:62*/
  /*T(main) = G(argc)*/
  /*T(fileNames) = T*/
  /*T(badAlloc) = G(argc)*/
  /*T(i) = G(argc)*/
  /*T(tmp_0) = G(argc)*/
  /*T(i_0) = G(argc)*/
  /*T(tmp_2) = G(argc)*/
  /*T(i_1) = G(argc)*/
  }

}
