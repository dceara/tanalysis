/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
extern  __attribute__((__nothrow__)) int rand(void) ;
extern  __attribute__((__nothrow__)) void *calloc(size_t __nmemb ,
                                                  size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
int main(int argc , char **argv ) 
{ short *vector ;
  unsigned int i ;
  int tmp_0 ;
  int __retres ;
  
  {/*sid:1*/
  vector = (short *)((void *)0);
  /*sid:1*/
  /*T(main) = G(argc) + G(argv)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(vector) = U*/
  /*T(i) = U*/
  /*T(tmp_0) = U*/
  /*T(__retres) = U*/
  
  /*sid:2*/
  vector = (short *)calloc(3U, sizeof(short ));
  /*sid:3*/
  if (! vector) {/*sid:5*/
    printf((char const   *)"Allocation error!\n");
    /*sid:6*/
    __retres = 0;
    /*sid:24*/
    goto return_label;}
  
  /*sid:7*/
  i = 0U;
  /*sid:8*/
  while (i < 3U) {/*sid:13*/
    {/*sid:14*/
     tmp_0 = rand();
     /*sid:15*/
     *(vector + i) = (short )(tmp_0 % 255);}
    /*sid:16*/
    printf((char const   *)"%d ", *(vector + i));
    /*sid:18*/
    if (i == 2U) {/*sid:19*/
    free((void *)vector);}
    else {/*sid:20*/
    printf((char const   *)"test\n");}
    
    /*sid:21*/
    i ++;}
  
  /*sid:8*/
  /*T(vector) = T*/
  /*T(tmp_0) = T*/
  
  /*sid:22*/
  printf((char const   *)"\n");
  /*sid:23*/
  __retres = 0;
  /*sid:25*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:25*/
  /*T(main) = U*/
  /*T(vector) = T*/
  /*T(tmp_0) = T*/
  }

}
