/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
extern  __attribute__((__nothrow__)) void *malloc(size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__,
__noreturn__)) void __assert_fail(char const   *__assertion ,
                                  char const   *__file , unsigned int __line ,
                                  char const   *__function ) ;
void *xalloc(size_t sz ) 
{ void *p ;
  
  {/*sid:2*/
  if (! (sz > (size_t )0)) {/*sid:4*/
    __assert_fail("sz>0", "./309/my-util.c", 80U, "xalloc");}
  
  /*sid:2*/
  /*T(sz) = G(sz)*/
  /*T(p) = U*/
  /*T(xalloc) = G(sz)*/
  
  /*sid:5*/
  p = malloc(sz);
  /*sid:5*/
  /*T(p) = G(sz)*/
  
  /*sid:7*/
  if (! (p != (void *)0)) {/*sid:9*/
    __assert_fail("p!=((void *)0)", "./309/my-util.c", 83U, "xalloc");}
  
  /*sid:10*/
  return (p);}

}
size_t strlcpy(char *dst , char const   *src , size_t siz ) 
{ register char *d ;
  register char const   *s ;
  register size_t n ;
  char *tmp ;
  char tmp_0 ;
  char const   *tmp_1 ;
  char const   *tmp_2 ;
  size_t __retres ;
  
  {/*sid:12*/
  d = dst;
  /*sid:12*/
  /*T(dst) = G(dst)*/
  /*T(src) = G(src)*/
  /*T(siz) = G(siz)*/
  /*T(d) = G(dst)*/
  /*T(s) = U*/
  /*T(n) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(__retres) = U*/
  /*T(strlcpy) = G(src) + G(dst) + G(siz)*/
  
  /*sid:14*/
  s = src;
  /*sid:14*/
  /*T(s) = G(src)*/
  
  /*sid:16*/
  n = siz;
  /*sid:16*/
  /*T(n) = G(siz)*/
  
  /*sid:18*/
  if (n != (size_t )0) {/*sid:19*/
    n -= (size_t )1;
    /*sid:20*/
    if (n != (size_t )0) {/*sid:21*/
      while (1) {/*sid:22*/
        {/*sid:23*/
         {/*sid:24*/
         tmp = d;
         /*sid:25*/
         d ++;}
         
         /*sid:26*/
         {/*sid:27*/
         tmp_1 = s;
         /*sid:28*/
         s ++;
         /*sid:29*/
         tmp_0 = *tmp_1;}
         
         /*sid:30*/
         *tmp = tmp_0;}
        /*sid:31*/
        if ((int )tmp_0 == 0) {/*sid:32*/
          break;}
        
        /*sid:34*/
        n -= (size_t )1;
        /*sid:35*/
        if (! (n != (size_t )0)) {/*sid:36*/
          break;}
        }
      
      /*sid:21*/
      /*T(d) = G(siz) + G(src) + G(dst)*/
      /*T(s) = G(siz) + G(src)*/
      /*T(n) = G(src) + G(siz)*/
      /*T(tmp) = G(dst) + G(src) + G(siz)*/
      /*T(tmp_0) = G(src) + G(siz)*/
      /*T(tmp_1) = G(src) + G(siz)*/
      }
    }
  
  /*sid:40*/
  if (n == (size_t )0) {/*sid:42*/
    if (siz != (size_t )0) {/*sid:43*/
      *d = (char )'\000';}
    
    /*sid:45*/
    while (1) {/*sid:46*/
      tmp_2 = s;
      /*sid:47*/
      s ++;
      /*sid:49*/
      if (! *tmp_2) {/*sid:50*/
        break;}
      }
    
    /*sid:45*/
    /*T(tmp_2) = G(src) + G(siz)*/
    }
  
  /*sid:40*/
  /*T(d) = G(src) + G(siz) + G(dst)*/
  /*T(s) = G(siz) + G(src)*/
  /*T(n) = G(src) + G(siz)*/
  /*T(tmp) = G(dst) + G(src) + G(siz)*/
  /*T(tmp_0) = G(src) + G(siz)*/
  /*T(tmp_1) = G(src) + G(siz)*/
  
  /*sid:53*/
  __retres = (unsigned int )((s - src) - 1);
  /*sid:53*/
  /*T(tmp_2) = G(src) + G(siz)*/
  /*T(__retres) = G(src) + G(siz)*/
  
  /*sid:54*/
  return (__retres);
  /*sid:54*/
  /*T(strlcpy) = G(src) + G(siz)*/
  }

}
