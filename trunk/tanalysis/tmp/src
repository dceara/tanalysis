Parsing
[preprocessing] running gcc -C -E -I.   tests/real_tests/huffman/prog6.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/huffman/Occ.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/huffman/fap.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/huffman/bfile.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/huffman/arbre.c
Cleaning unused parts
Symbolic link
Starting semantical analysis
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
struct noeud {
   int car ;
   int poid ;
   struct noeud *fg ;
   struct noeud *fd ;
};
typedef struct noeud *Arbre;
struct Codage_char {
   char caractere ;
   int occur ;
   int codeLength ;
   int codage ;
};
typedef struct Codage_char codeCar;
struct maillon;
typedef struct maillon *fap;
struct maillon {
   Arbre element ;
   int priorite ;
   fap prochain ;
};
struct __anonstruct_BFILE_22 {
   int r_w ;
   FILE *file ;
   int nb_bit ;
   int which_bit ;
   int octet ;
};
typedef struct __anonstruct_BFILE_22 BFILE;
extern int fclose(FILE *__stream ) ;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
extern  __attribute__((__nothrow__,
__noreturn__)) void exit(int __status ) ;
void initTab(codeCar *cc ) ;
void countOcc(FILE *fichier , codeCar *tabOcc ) ;
void afficheTab(codeCar *cc ) ;
Arbre huff(codeCar *tabOcc ) ;
void length(Arbre huff_0 , codeCar *cc ) ;
void ecritureFichierCode(FILE *fichierCode , codeCar *tabOcc ) ;
int main(int argc , char **argv ) 
{ FILE *fichier ;
  codeCar tabOcc[256] ;
  Arbre arbreHuff ;
  FILE *fichierCode ;
  int __retres ;
  
  {/*sid:2*/
  if (argc != 3) {printf((char const   *)"error nb arg\n");
    exit(1);}
  
  /*sid:2*/
  /*T(main) = G(argc) + G(argv)*/
  /*T(__retres) = U*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(fichier) = U*/
  /*T(tabOcc) = U*/
  /*T(arbreHuff) = U*/
  /*T(fichierCode) = U*/
  
  /*sid:6*/
  fichier = fopen((char const   *)*(argv + 1), (char const   *)"r");
  /*sid:6*/
  /*T(fichier) = G(argc)*/
  
  if (fichier == (void *)0) {printf((char const   *)"error to open file\n");
    exit(1);}
  
  initTab(tabOcc);
  countOcc(fichier, tabOcc);
  /*sid:14*/
  arbreHuff = huff(tabOcc);
  /*sid:14*/
  /*T(arbreHuff) = G(argc)*/
  
  /*sid:15*/
  length(arbreHuff, tabOcc);
  /*sid:15*/
  /*T(tabOcc) = G(argc)*/
  
  afficheTab(tabOcc);
  /*sid:17*/
  fichierCode = fopen((char const   *)*(argv + 2), (char const   *)"w");
  /*sid:17*/
  /*T(fichierCode) = G(argc)*/
  
  if (fichier == (void *)0) {printf((char const   *)"error to open file\n");
    exit(1);}
  
  ecritureFichierCode(fichierCode, tabOcc);
  fclose(fichier);
  fclose(fichierCode);
  /*sid:26*/
  __retres = 0;
  /*sid:26*/
  /*T(__retres) = G(argc)*/
  
  /*sid:358*/
  return (__retres);
  /*sid:358*/
  /*T(main) = G(argc)*/
  }

}
extern int fscanf(FILE * __restrict  __stream ,
                  char const   * __restrict  __format  , ...) ;
extern int fputc(int __c , FILE *__stream ) ;
extern  __attribute__((__nothrow__)) int feof(FILE *__stream ) ;
Arbre Cons(int poid , int car , Arbre fg , Arbre fd ) ;
Arbre FilsGauche(Arbre A ) ;
Arbre FilsDroit(Arbre A ) ;
int Car(Arbre A ) ;
int EstVide(Arbre A ) ;
int EstFeuille(Arbre A ) ;
fap creer_fap_vide(void) ;
fap inserer(fap f , Arbre element , int priorite ) ;
fap extraire(fap f , Arbre *element , int *priorite ) ;
codeCar *longCode(Arbre huff_0 , int *code , codeCar *CC , int *hauteur ) ;
int nbCarDiff(codeCar *codeC ) ;
int sizeHuff(codeCar *tabOcc ) ;
void length(Arbre huff_0 , codeCar *cc ) 
{ int i ;
  int hauteur ;
  int code ;
  
  {/*sid:27*/
  hauteur = 0;
  /*sid:27*/
  /*T(length) = G(huff_0) + G(cc)*/
  /*T(huff_0) = G(huff_0)*/
  /*T(cc) = G(cc)*/
  /*T(i) = U*/
  /*T(hauteur) = U*/
  /*T(code) = U*/
  
  code = 0;
  i = 0;
  while (i < 256) {(cc + i)->codeLength = 0;
    (cc + i)->codage = 0;
    i ++;}
  
  /*sid:37*/
  longCode(huff_0, & code, cc, & hauteur);
  /*sid:37*/
  /*T(cc) = G(cc) + G(huff_0)*/
  /*T(hauteur) = G(huff_0)*/
  /*T(code) = G(huff_0)*/
  
  /*sid:359*/
  return;
  /*sid:359*/
  /*T(length) = U*/
  }

}
codeCar *longCode(Arbre huff_0 , int *code , codeCar *CC , int *hauteur ) 
{ int tmp ;
  int tmp_0 ;
  int tmp_1 ;
  Arbre tmp_2 ;
  Arbre tmp_3 ;
  int tmp_4 ;
  int t ;
  int tmp_5 ;
  Arbre tmp_6 ;
  Arbre tmp_7 ;
  int tmp_8 ;
  int tmp_9 ;
  codeCar *__retres ;
  
  {/*sid:39*/
  tmp_9 = EstVide(huff_0);
  /*sid:39*/
  /*T(huff_0) = G(huff_0)*/
  /*T(code) = G(code)*/
  /*T(CC) = G(CC)*/
  /*T(hauteur) = G(hauteur)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(t) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(tmp_8) = U*/
  /*T(tmp_9) = G(huff_0)*/
  /*T(longCode) = G(CC) + G(huff_0) + G(code) + G(hauteur)*/
  /*T(__retres) = U*/
  
  if (! tmp_9) {/*sid:42*/
    tmp_1 = EstFeuille(huff_0);
    /*sid:42*/
    /*T(tmp_1) = G(huff_0)*/
    
    if (tmp_1) {{/*sid:45*/
                 tmp = Car(huff_0);
                 /*sid:45*/
                 /*T(tmp) = G(huff_0)*/
                 
                 /*sid:46*/
                 (CC + tmp)->codeLength = *hauteur;
                 /*sid:46*/
                 /*T(CC) = G(hauteur) + G(CC) + G(huff_0)*/
                 }
      {/*sid:48*/
       tmp_0 = Car(huff_0);
       /*sid:48*/
       /*T(tmp_0) = G(huff_0)*/
       
       /*sid:49*/
       (CC + tmp_0)->codage = *code;
       /*sid:49*/
       /*T(CC) = G(code) + G(CC) + G(hauteur) + G(huff_0)*/
       }
      /*sid:50*/
      __retres = CC;
      /*sid:50*/
      /*T(__retres) = G(hauteur) + G(CC) + G(code) + G(huff_0)*/
      
      goto return_label;}
    
    /*sid:52*/
    tmp_3 = FilsGauche(huff_0);
    /*sid:52*/
    /*T(tmp_3) = G(huff_0)*/
    
    /*sid:53*/
    tmp_4 = EstVide(tmp_3);
    /*sid:53*/
    /*T(tmp_4) = G(huff_0)*/
    
    if (! tmp_4) {/*sid:56*/
      (*hauteur) ++;
      /*sid:56*/
      /*T(hauteur) = G(huff_0) + G(hauteur)*/
      
      /*sid:57*/
      tmp_2 = FilsGauche(huff_0);
      /*sid:57*/
      /*T(tmp_2) = G(huff_0)*/
      
      /*sid:58*/
      longCode(tmp_2, code, CC, hauteur);
      /*sid:58*/
      /*T(code) = G(huff_0) + G(hauteur) + G(code)*/
      /*T(CC) = G(hauteur) + G(code) + G(CC) + G(huff_0)*/
      
      (*hauteur) --;}
    
    /*sid:60*/
    tmp_7 = FilsDroit(huff_0);
    /*sid:60*/
    /*T(code) = G(hauteur) + G(huff_0) + G(code)*/
    /*T(CC) = G(huff_0) + G(code) + G(hauteur) + G(CC)*/
    /*T(hauteur) = G(huff_0) + G(hauteur)*/
    /*T(tmp_2) = G(huff_0)*/
    /*T(tmp_7) = G(huff_0)*/
    
    /*sid:61*/
    tmp_8 = EstVide(tmp_7);
    /*sid:61*/
    /*T(tmp_8) = G(huff_0)*/
    
    if (! tmp_8) {(*hauteur) ++;
      /*sid:66*/
      t = *code;
      /*sid:66*/
      /*T(t) = G(code) + G(hauteur) + G(huff_0)*/
      
      /*sid:67*/
      tmp_5 = 0;
      /*sid:67*/
      /*T(tmp_5) = G(huff_0)*/
      
      /*sid:68*/
      tmp_5 = 1 << *hauteur;
      /*sid:68*/
      /*T(tmp_5) = G(hauteur) + G(huff_0)*/
      
      *code |= tmp_5;
      /*sid:70*/
      tmp_6 = FilsDroit(huff_0);
      /*sid:70*/
      /*T(tmp_6) = G(huff_0)*/
      
      longCode(tmp_6, code, CC, hauteur);
      (*hauteur) --;
      *code = t;}
    }
  
  /*sid:74*/
  __retres = CC;
  /*sid:74*/
  /*T(code) = G(huff_0) + G(hauteur) + G(code)*/
  /*T(CC) = G(code) + G(CC) + G(hauteur) + G(huff_0)*/
  /*T(hauteur) = G(huff_0) + G(hauteur)*/
  /*T(tmp) = G(huff_0)*/
  /*T(tmp_0) = G(huff_0)*/
  /*T(tmp_1) = G(huff_0)*/
  /*T(tmp_2) = G(huff_0)*/
  /*T(tmp_3) = G(huff_0)*/
  /*T(tmp_4) = G(huff_0)*/
  /*T(t) = G(code) + G(hauteur) + G(huff_0)*/
  /*T(tmp_5) = G(hauteur) + G(huff_0)*/
  /*T(tmp_6) = G(huff_0)*/
  /*T(tmp_7) = G(huff_0)*/
  /*T(tmp_8) = G(huff_0)*/
  /*T(__retres) = G(hauteur) + G(CC) + G(code) + G(huff_0)*/
  
  /*sid:361*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:361*/
  /*T(code) = G(huff_0) + G(hauteur) + G(code)*/
  /*T(hauteur) = G(huff_0) + G(hauteur)*/
  /*T(tmp_2) = G(huff_0)*/
  /*T(tmp_3) = G(huff_0)*/
  /*T(tmp_4) = G(huff_0)*/
  /*T(t) = G(code) + G(hauteur) + G(huff_0)*/
  /*T(tmp_5) = G(hauteur) + G(huff_0)*/
  /*T(tmp_6) = G(huff_0)*/
  /*T(tmp_7) = G(huff_0)*/
  /*T(tmp_8) = G(huff_0)*/
  }

}
void _bitread(int code , int length_0 ) 
{ int i ;
  
  {/*sid:75*/
  i = length_0;
  /*sid:75*/
  /*T(_bitread) = G(code) + G(length_0)*/
  /*T(code) = G(code)*/
  /*T(length_0) = G(length_0)*/
  /*T(i) = G(length_0)*/
  
  while (i > 0) {printf((char const   *)"%d", (code >> i) & 1);
    i --;}
  
  /*sid:362*/
  return;
  /*sid:362*/
  /*T(_bitread) = U*/
  }

}
void initTab(codeCar *cc ) 
{ int i ;
  
  {/*sid:83*/
  i = 0;
  /*sid:83*/
  /*T(initTab) = G(cc)*/
  /*T(cc) = G(cc)*/
  /*T(i) = U*/
  
  while (i < 256) {(cc + i)->occur = 0;
    i ++;}
  
  /*sid:363*/
  return;
  /*sid:363*/
  /*T(initTab) = U*/
  }

}
void countOcc(FILE *fichier , codeCar *tabOcc ) 
{ char c ;
  int tmp ;
  
  {while (1) {/*sid:92*/
     tmp = feof(fichier);
     /*sid:92*/
     /*T(tabOcc) = G(tabOcc)*/
     /*T(c) = U*/
     
     if (tmp) {break;}
     
     /*sid:95*/
     fscanf((FILE *)fichier, (char const   *)"%c", & c);
     /*sid:95*/
     /*T(c) = T*/
     
     /*sid:96*/
     ((tabOcc + (int )c)->occur) ++;
     /*sid:96*/
     /*T(tabOcc) = T*/
     }
  
  /*sid:364*/
  return;
  /*sid:364*/
  /*T(countOcc) = U*/
  }

}
void afficheTab(codeCar *cc ) 
{ int i ;
  
  {/*sid:98*/
  i = 0;
  /*sid:98*/
  /*T(afficheTab) = G(cc)*/
  /*T(cc) = G(cc)*/
  /*T(i) = U*/
  
  while (i < 256) {if ((cc + i)->occur != 0) {printf((char const   *)"%c %d  %d %d\n",
                                                     (char )i,
                                                     (cc + i)->occur,
                                                     (cc + i)->codeLength,
                                                     (cc + i)->codage);
                     _bitread((cc + i)->codage, (cc + i)->codeLength);
                     printf((char const   *)"\n");}
    
    i ++;}
  
  /*sid:365*/
  return;
  /*sid:365*/
  /*T(afficheTab) = U*/
  }

}
Arbre huff(codeCar *tabOcc ) 
{ int i ;
  Arbre arbre ;
  int nbCar ;
  fap fapOcc ;
  Arbre arbreT ;
  Arbre arbreT_0 ;
  Arbre fd ;
  Arbre fg ;
  int poidD ;
  int poidG ;
  int poid ;
  
  {/*sid:111*/
  nbCar = 0;
  /*sid:111*/
  /*T(huff) = G(tabOcc)*/
  /*T(tabOcc) = G(tabOcc)*/
  /*T(i) = U*/
  /*T(arbre) = U*/
  /*T(nbCar) = U*/
  /*T(fapOcc) = U*/
  /*T(arbreT) = U*/
  /*T(arbreT_0) = U*/
  /*T(fd) = U*/
  /*T(fg) = U*/
  /*T(poidD) = U*/
  /*T(poidG) = U*/
  /*T(poid) = U*/
  
  fapOcc = creer_fap_vide();
  i = 0;
  /*sid:114*/
  while (i < 256) {if ((tabOcc + i)->occur != 0) {arbreT = Cons((tabOcc + i)->occur,
                                                                i,
                                                                (struct noeud *)((void *)0),
                                                                (struct noeud *)((void *)0));
                     fapOcc = inserer(fapOcc, arbreT, (tabOcc + i)->occur);
                     nbCar ++;}
    
    i ++;}
  
  /*sid:114*/
  /*T(nbCar) = G(tabOcc)*/
  /*T(fapOcc) = G(tabOcc)*/
  /*T(arbreT) = G(tabOcc)*/
  
  i = 0;
  /*sid:126*/
  while (i < nbCar - 1) {fapOcc = extraire(fapOcc, & fg, & poidG);
    fapOcc = extraire(fapOcc, & fd, & poidD);
    arbreT_0 = Cons(poidD + poidG, -1, fg, fd);
    fapOcc = inserer(fapOcc, arbreT_0, poidD + poidG);
    i ++;}
  
  /*sid:126*/
  /*T(i) = G(tabOcc)*/
  /*T(arbreT_0) = G(tabOcc)*/
  /*T(fd) = G(tabOcc)*/
  /*T(fg) = G(tabOcc)*/
  /*T(poidD) = G(tabOcc)*/
  /*T(poidG) = G(tabOcc)*/
  
  /*sid:135*/
  fapOcc = extraire(fapOcc, & arbre, & poid);
  /*sid:135*/
  /*T(arbre) = G(tabOcc)*/
  /*T(poid) = G(tabOcc)*/
  
  return (arbre);}

}
int nbCarDiff(codeCar *codeC ) 
{ int i ;
  int res ;
  
  {/*sid:137*/
  res = 0;
  /*sid:137*/
  /*T(nbCarDiff) = G(codeC)*/
  /*T(codeC) = G(codeC)*/
  /*T(i) = U*/
  /*T(res) = U*/
  
  i = 0;
  /*sid:139*/
  while (i < 256) {if ((codeC + i)->occur != 0) {res ++;}
    
    i ++;}
  
  /*sid:139*/
  /*T(res) = G(codeC)*/
  
  return (res);}

}
int sizeHuff(codeCar *tabOcc ) 
{ int i ;
  int res ;
  
  {/*sid:149*/
  res = 0;
  /*sid:149*/
  /*T(sizeHuff) = G(tabOcc)*/
  /*T(tabOcc) = G(tabOcc)*/
  /*T(i) = U*/
  /*T(res) = U*/
  
  i = 0;
  /*sid:151*/
  while (i < 256) {res += (tabOcc + i)->occur * (tabOcc + i)->codeLength;
    i ++;}
  
  /*sid:151*/
  /*T(res) = G(tabOcc)*/
  
  return (res);}

}
void ecritureFichierCode(FILE *fichierCode , codeCar *tabOcc ) 
{ int i ;
  int j ;
  int nbCarDiffC ;
  int code ;
  int codeL ;
  int sizeCodeHuff ;
  
  {/*sid:158*/
  nbCarDiffC = nbCarDiff(tabOcc);
  /*sid:158*/
  /*T(ecritureFichierCode) = G(fichierCode) + G(tabOcc)*/
  /*T(fichierCode) = G(fichierCode)*/
  /*T(tabOcc) = G(tabOcc)*/
  /*T(i) = U*/
  /*T(j) = U*/
  /*T(nbCarDiffC) = G(tabOcc)*/
  /*T(code) = U*/
  /*T(codeL) = U*/
  /*T(sizeCodeHuff) = U*/
  
  j = 0;
  while ((unsigned int )j < sizeof(int ) / sizeof(char )) {fputc(nbCarDiffC,
                                                                 fichierCode);
    nbCarDiffC >>= 8;
    j ++;}
  
  i = 0;
  /*sid:168*/
  while (i < 256) {if ((tabOcc + i)->occur != 0) {fputc((int )(tabOcc + i)->caractere,
                                                        fichierCode);
                     code = (tabOcc + i)->codage;
                     j = 0;
                     while ((unsigned int )j < sizeof(int ) / sizeof(char )) {
                       fputc(code, fichierCode);
                       code >>= 8;
                       j ++;}
                     
                     codeL = (tabOcc + i)->codeLength;
                     j = 0;
                     while ((unsigned int )j < sizeof(int ) / sizeof(char )) {
                       fputc(codeL, fichierCode);
                       code = codeL >> 8;
                       j ++;}
                     }
    
    i ++;}
  
  /*sid:168*/
  /*T(i) = G(tabOcc)*/
  /*T(j) = G(tabOcc)*/
  /*T(code) = G(tabOcc)*/
  /*T(codeL) = G(tabOcc)*/
  
  /*sid:197*/
  sizeCodeHuff = sizeHuff(tabOcc);
  /*sid:197*/
  /*T(sizeCodeHuff) = G(tabOcc)*/
  
  /*sid:198*/
  j = 0;
  /*sid:198*/
  /*T(j) = U*/
  
  while ((unsigned int )j < sizeof(int ) / sizeof(char )) {fputc(sizeCodeHuff,
                                                                 fichierCode);
    sizeCodeHuff >>= 8;
    j ++;}
  
  /*sid:366*/
  return;
  /*sid:366*/
  /*T(ecritureFichierCode) = U*/
  }

}
int est_fap_vide(fap f ) ;
void detruire_fap(fap f ) ;
extern  __attribute__((__nothrow__)) void *malloc(size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
fap creer_fap_vide(void) 
{ fap __retres ;
  
  {/*sid:207*/
  __retres = (struct maillon *)((void *)0);
  /*sid:207*/
  /*T(creer_fap_vide) = U*/
  /*T(__retres) = U*/
  
  return (__retres);}

}
fap inserer(fap f , Arbre element , int priorite ) 
{ fap nouveau ;
  fap courant ;
  fap precedent ;
  
  {/*sid:208*/
  nouveau = (fap )malloc(sizeof(struct maillon ));
  /*sid:208*/
  /*T(f) = G(f)*/
  /*T(element) = G(element)*/
  /*T(priorite) = G(priorite)*/
  /*T(nouveau) = U*/
  /*T(courant) = U*/
  /*T(precedent) = U*/
  /*T(inserer) = G(element) + G(f) + G(priorite)*/
  
  /*sid:209*/
  nouveau->element = element;
  /*sid:209*/
  /*T(nouveau) = G(element)*/
  
  /*sid:210*/
  nouveau->priorite = priorite;
  /*sid:210*/
  /*T(nouveau) = G(priorite) + G(element)*/
  
  if (f == (void *)0)
  {/*sid:213*/
  nouveau->prochain = f;
  /*sid:213*/
  /*T(nouveau) = G(f) + G(priorite) + G(element)*/
  
  /*sid:214*/
  f = nouveau;
  /*sid:214*/
  /*T(f) = G(element) + G(priorite) + G(f)*/
  }
  else {if (priorite < f->priorite)
        {/*sid:217*/
        nouveau->prochain = f;
        /*sid:217*/
        /*T(nouveau) = G(f) + G(priorite) + G(element)*/
        
        /*sid:218*/
        f = nouveau;
        /*sid:218*/
        /*T(f) = G(element) + G(priorite) + G(f)*/
        }
        else {/*sid:219*/
        precedent = f;
        /*sid:219*/
        /*T(precedent) = G(priorite) + G(f)*/
        
        /*sid:220*/
        courant = f->prochain;
        /*sid:220*/
        /*T(courant) = G(priorite) + G(f)*/
        
        while (1) {if (courant != (void *)0)
                   {if (! (priorite >= courant->priorite)) {break;}
                   }
                   else {break;}
          
          precedent = courant;
          courant = courant->prochain;}
        
        /*sid:230*/
        precedent->prochain = nouveau;
        /*sid:230*/
        /*T(precedent) = G(element) + G(priorite) + G(f)*/
        
        /*sid:231*/
        nouveau->prochain = courant;
        /*sid:231*/
        /*T(f) = G(element) + G(priorite) + G(f)*/
        /*T(nouveau) = G(f) + G(priorite) + G(element)*/
        }
  }
  
  /*sid:232*/
  return (f);
  /*sid:232*/
  /*T(courant) = G(priorite) + G(f)*/
  /*T(precedent) = G(element) + G(priorite) + G(f)*/
  }

}
fap extraire(fap f , Arbre *element , int *priorite ) 
{ fap courant ;
  
  {/*sid:234*/
  if (f != (void *)0) {/*sid:235*/
    courant = f;
    /*sid:235*/
    /*T(courant) = G(f)*/
    
    /*sid:236*/
    *element = courant->element;
    /*sid:236*/
    /*T(element) = G(f) + G(element)*/
    
    /*sid:237*/
    *priorite = courant->priorite;
    /*sid:237*/
    /*T(priorite) = G(f) + G(priorite)*/
    
    f = courant->prochain;
    free((void *)courant);}
  
  /*sid:234*/
  /*T(f) = G(f)*/
  /*T(element) = G(element)*/
  /*T(priorite) = G(priorite)*/
  /*T(courant) = U*/
  /*T(extraire) = G(element) + G(f) + G(priorite)*/
  
  /*sid:241*/
  return (f);
  /*sid:241*/
  /*T(element) = G(f) + G(element)*/
  /*T(priorite) = G(f) + G(priorite)*/
  /*T(courant) = G(f)*/
  /*T(extraire) = G(f)*/
  }

}
int est_fap_vide(fap f ) 
{ int __retres ;
  
  {/*sid:242*/
  __retres = f == (void *)0;
  /*sid:242*/
  /*T(f) = G(f)*/
  /*T(__retres) = G(f)*/
  /*T(est_fap_vide) = G(f)*/
  
  return (__retres);}

}
void detruire_fap(fap f ) 
{ Arbre element ;
  int priorite ;
  int tmp ;
  
  {while (1) {/*sid:244*/
     tmp = est_fap_vide(f);
     /*sid:244*/
     /*T(element) = U*/
     /*T(priorite) = U*/
     
     if (tmp) {break;}
     
     /*sid:247*/
     f = extraire(f, & element, & priorite);
     /*sid:247*/
     /*T(element) = G(f)*/
     /*T(priorite) = G(f)*/
     }
  
  /*sid:369*/
  return;
  /*sid:369*/
  /*T(detruire_fap) = U*/
  }

}
extern int fgetc(FILE *__stream ) ;
extern int fputs(char const   * __restrict  __s , FILE * __restrict  __stream ) ;
BFILE *bstart(FILE *fichier , char const   *mode ) ;
int bstop(BFILE *fichier ) ;
int bitread(BFILE *fichier ) ;
int bitwrite(BFILE *fichier , int bit ) ;
int beof(BFILE *fichier ) ;
BFILE *bstart(FILE *fichier , char const   *mode ) 
{ BFILE *bf ;
  BFILE *__retres ;
  
  {/*sid:249*/
  bf = (BFILE *)malloc(sizeof(BFILE ));
  /*sid:249*/
  /*T(bstart) = G(fichier) + G(mode)*/
  /*T(__retres) = U*/
  /*T(fichier) = G(fichier)*/
  /*T(mode) = G(mode)*/
  /*T(bf) = U*/
  
  if (bf == (void *)0) {__retres = (BFILE *)0;
    goto return_label;}
  
  if ((int const   )*mode == 'r')
  {/*sid:256*/
  bf->r_w = 0;
  /*sid:256*/
  /*T(bf) = G(mode)*/
  }
  else {/*sid:258*/
  if ((int const   )*mode == 'w') {bf->r_w = 1;}
  
  /*sid:258*/
  /*T(bf) = G(mode)*/
  }
  
  /*sid:261*/
  bf->file = fichier;
  /*sid:261*/
  /*T(bf) = G(fichier) + G(mode)*/
  
  bf->nb_bit = 0;
  bf->which_bit = 7;
  bf->octet = 0;
  /*sid:265*/
  __retres = bf;
  /*sid:265*/
  /*T(__retres) = G(fichier) + G(mode)*/
  
  /*sid:371*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:371*/
  /*T(__retres) = G(fichier) + G(mode)*/
  /*T(bf) = G(fichier) + G(mode)*/
  }

}
int bstop(BFILE *fichier ) 
{ int __retres ;
  
  {/*sid:267*/
  if (fichier->r_w == 1) {while (fichier->which_bit >= 0) {bitwrite(fichier, 0);}
    
    fputs((char const   *)(& fichier->octet), (FILE *)fichier->file);}
  
  /*sid:267*/
  /*T(bstop) = G(fichier)*/
  /*T(__retres) = U*/
  /*T(fichier) = G(fichier)*/
  
  free((void *)fichier);
  __retres = 0;
  /*sid:372*/
  return (__retres);
  /*sid:372*/
  /*T(bstop) = U*/
  }

}
int bitread(BFILE *fichier ) 
{ int __retres ;
  
  {/*sid:278*/
  if (fichier->which_bit == 7)
  {fichier->octet = fgetc(fichier->file);
  fichier->which_bit = 7;}
  else {if (fichier->which_bit < 0) {fichier->octet = fgetc(fichier->file);
          fichier->which_bit = 7;}
  }
  
  /*sid:278*/
  /*T(bitread) = G(fichier)*/
  /*T(__retres) = U*/
  /*T(fichier) = G(fichier)*/
  
  if (fichier->octet == -1) {/*sid:288*/
    __retres = -1;
    /*sid:288*/
    /*T(__retres) = G(fichier)*/
    
    goto return_label;}
  
  if (fichier->which_bit <= 7) {if (fichier->which_bit >= 0) {(fichier->which_bit) --;
                                  /*sid:295*/
                                  __retres = (fichier->octet >> (fichier->which_bit + 1)) & 1;
                                  /*sid:295*/
                                  /*T(__retres) = G(fichier)*/
                                  
                                  goto return_label;}
    }
  
  /*sid:298*/
  __retres = -1;
  /*sid:298*/
  /*T(__retres) = G(fichier)*/
  
  return_label: /* CIL Label */ 
  return (__retres);}

}
int bitwrite(BFILE *fichier , int bit ) 
{ char tmp ;
  int __retres ;
  
  {/*sid:300*/
  if (fichier->which_bit < 0) {fputs((char const   *)(& fichier->octet),
                                     (FILE *)fichier->file);
    fichier->octet = 0;
    fichier->which_bit = 7;}
  
  /*sid:300*/
  /*T(bitwrite) = G(fichier) + G(bit)*/
  /*T(__retres) = U*/
  /*T(fichier) = G(fichier)*/
  /*T(bit) = G(bit)*/
  /*T(tmp) = U*/
  
  if (bit == 1)
  {/*sid:307*/
  tmp = (char)0;
  /*sid:307*/
  /*T(tmp) = G(bit)*/
  
  /*sid:308*/
  tmp = (char )(1 << fichier->which_bit);
  /*sid:308*/
  /*T(tmp) = G(fichier) + G(bit)*/
  
  /*sid:309*/
  fichier->octet |= (int )tmp;
  /*sid:309*/
  /*T(fichier) = G(bit) + G(fichier)*/
  
  (fichier->which_bit) --;}
  else {if (bit == 0) {/*sid:313*/
          (fichier->which_bit) --;
          /*sid:313*/
          /*T(fichier) = G(bit) + G(fichier)*/
          /*T(tmp) = G(fichier) + G(bit)*/
          }
  }
  
  /*sid:315*/
  __retres = 0;
  /*sid:315*/
  /*T(fichier) = G(bit) + G(fichier)*/
  /*T(tmp) = G(fichier) + G(bit)*/
  
  /*sid:376*/
  return (__retres);
  /*sid:376*/
  /*T(bitwrite) = U*/
  }

}
int beof(BFILE *fichier ) 
{ int tmp ;
  int __retres ;
  
  {/*sid:316*/
  tmp = feof(fichier->file);
  /*sid:316*/
  /*T(beof) = G(fichier)*/
  /*T(__retres) = U*/
  /*T(fichier) = G(fichier)*/
  /*T(tmp) = U*/
  
  if (tmp) {printf((char const   *)"zut\n");
  __retres = 1;
  goto return_label;}
  else {if (fichier->octet == -1)
        {/*sid:322*/
        __retres = 1;
        /*sid:322*/
        /*T(__retres) = G(fichier)*/
        
        goto return_label;}
        else {/*sid:323*/
        __retres = 0;
        /*sid:323*/
        /*T(__retres) = G(fichier)*/
        
        goto return_label;}
  }
  
  /*sid:380*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:380*/
  /*T(__retres) = G(fichier)*/
  }

}
Arbre ArbreVide(void) ;
int Poid(Arbre A ) ;
void Detruire(Arbre A ) ;
Arbre ArbreVide(void) 
{ Arbre __retres ;
  
  {/*sid:324*/
  __retres = (struct noeud *)((void *)0);
  /*sid:324*/
  /*T(ArbreVide) = U*/
  /*T(__retres) = U*/
  
  return (__retres);}

}
Arbre Cons(int poid , int car , Arbre fg , Arbre fd ) 
{ Arbre A ;
  
  {/*sid:325*/
  A = (Arbre )malloc(sizeof(struct noeud ));
  /*sid:325*/
  /*T(poid) = G(poid)*/
  /*T(car) = G(car)*/
  /*T(fg) = G(fg)*/
  /*T(fd) = G(fd)*/
  /*T(A) = U*/
  /*T(Cons) = G(fg) + G(poid) + G(car) + G(fd)*/
  
  /*sid:326*/
  A->poid = poid;
  /*sid:326*/
  /*T(A) = G(poid)*/
  
  /*sid:327*/
  A->car = car;
  /*sid:327*/
  /*T(A) = G(car) + G(poid)*/
  
  /*sid:328*/
  A->fg = fg;
  /*sid:328*/
  /*T(A) = G(fg) + G(car) + G(poid)*/
  
  /*sid:329*/
  A->fd = fd;
  /*sid:329*/
  /*T(A) = G(fd) + G(fg) + G(car) + G(poid)*/
  
  return (A);}

}
Arbre FilsGauche(Arbre A ) 
{ Arbre __retres ;
  
  {/*sid:331*/
  __retres = A->fg;
  /*sid:331*/
  /*T(A) = G(A)*/
  /*T(__retres) = G(A)*/
  /*T(FilsGauche) = G(A)*/
  
  return (__retres);}

}
Arbre FilsDroit(Arbre A ) 
{ Arbre __retres ;
  
  {/*sid:332*/
  __retres = A->fd;
  /*sid:332*/
  /*T(A) = G(A)*/
  /*T(__retres) = G(A)*/
  /*T(FilsDroit) = G(A)*/
  
  return (__retres);}

}
int Poid(Arbre A ) 
{ int __retres ;
  
  {/*sid:333*/
  __retres = A->poid;
  /*sid:333*/
  /*T(Poid) = G(A)*/
  /*T(A) = G(A)*/
  /*T(__retres) = G(A)*/
  
  return (__retres);}

}
int Car(Arbre A ) 
{ int __retres ;
  
  {/*sid:334*/
  __retres = A->car;
  /*sid:334*/
  /*T(A) = G(A)*/
  /*T(Car) = G(A)*/
  /*T(__retres) = G(A)*/
  
  return (__retres);}

}
int EstVide(Arbre A ) 
{ int __retres ;
  
  {/*sid:335*/
  __retres = A == (void *)0;
  /*sid:335*/
  /*T(A) = G(A)*/
  /*T(EstVide) = G(A)*/
  /*T(__retres) = G(A)*/
  
  return (__retres);}

}
int EstFeuille(Arbre A ) 
{ Arbre tmp ;
  int tmp_0 ;
  Arbre tmp_1 ;
  int tmp_2 ;
  int tmp_3 ;
  
  {/*sid:337*/
  if (A != (void *)0)
  {/*sid:338*/
  tmp = FilsGauche(A);
  /*sid:338*/
  /*T(tmp) = G(A)*/
  
  /*sid:339*/
  tmp_0 = EstVide(tmp);
  /*sid:339*/
  /*T(tmp_0) = G(A)*/
  
  if (tmp_0)
  {/*sid:341*/
  tmp_1 = FilsDroit(A);
  /*sid:341*/
  /*T(tmp_1) = G(A)*/
  
  /*sid:342*/
  tmp_2 = EstVide(tmp_1);
  /*sid:342*/
  /*T(tmp_2) = G(A)*/
  
  if (tmp_2) {/*sid:344*/
  tmp_3 = 1;
  /*sid:344*/
  /*T(tmp_3) = G(A)*/
  }
  else {/*sid:345*/
  tmp_3 = 0;
  /*sid:345*/
  /*T(tmp_3) = G(A)*/
  }
  }
  else {/*sid:346*/
  tmp_3 = 0;
  /*sid:346*/
  /*T(tmp_3) = G(A)*/
  }
  }
  else {/*sid:347*/
  tmp_3 = 0;
  /*sid:347*/
  /*T(tmp) = G(A)*/
  /*T(tmp_0) = G(A)*/
  /*T(tmp_1) = G(A)*/
  /*T(tmp_2) = G(A)*/
  /*T(tmp_3) = G(A)*/
  }
  
  /*sid:337*/
  /*T(A) = G(A)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(EstFeuille) = G(A)*/
  
  /*sid:348*/
  return (tmp_3);
  /*sid:348*/
  /*T(tmp_1) = G(A)*/
  /*T(tmp_2) = G(A)*/
  }

}
void Detruire(Arbre A ) 
{ Arbre tmp ;
  Arbre tmp_0 ;
  int tmp_1 ;
  
  {/*sid:349*/
  tmp_1 = EstVide(A);
  /*sid:349*/
  /*T(Detruire) = G(A)*/
  /*T(A) = G(A)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = G(A)*/
  
  if (! tmp_1) {/*sid:352*/
    tmp = FilsGauche(A);
    /*sid:352*/
    /*T(tmp) = G(A)*/
    
    Detruire(tmp);
    /*sid:354*/
    tmp_0 = FilsDroit(A);
    /*sid:354*/
    /*T(tmp_0) = G(A)*/
    
    Detruire(tmp_0);
    free((void *)A);}
  
  /*sid:387*/
  return;
  /*sid:387*/
  /*T(Detruire) = U*/
  /*T(tmp) = G(A)*/
  /*T(tmp_0) = G(A)*/
  }

}
