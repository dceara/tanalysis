Parsing
[preprocessing] running gcc -C -E -I.   tests/real_tests/ArmAssembler/Phase1.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/ArmAssembler/MachineLex.c
[preprocessing] running gcc -C -E -I.   tests/real_tests/ArmAssembler/AnalyseSynt.c
Cleaning unused parts
Symbolic link
Starting semantical analysis
/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned int size_t;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
enum __anonenum_NomLexeme_6 {
    NL = 0,
    ETIQUETTE = 1,
    NOM_REG = 2,
    DIRECTIVE = 3,
    INSTRUCTION = 4,
    INTEGER = 5,
    CHAINE = 6,
    VIRGULE = 7,
    POINT_EXCL = 8,
    DIESE = 9,
    MOINS = 10,
    DEUX_POINTS = 11,
    PLUS = 12,
    EGAL = 13,
    PAR_OUV = 14,
    PAR_FERM = 15,
    ACCOL_OUV = 16,
    ACCOL_FERM = 17,
    CROCH_OUV = 18,
    CROCH_FERM = 19,
    ENDLEX = 20,
    ERRLEX = 21
} ;
typedef enum __anonenum_NomLexeme_6 NomLexeme;
struct __anonstruct_champs_inst_7 {
   char base[6] ;
   char cond[3] ;
   int cod_cond ;
   char BHW ;
   int S ;
   int T ;
   char pile[3] ;
};
typedef struct __anonstruct_champs_inst_7 champs_inst;
struct __anonstruct_Lexeme_8 {
   NomLexeme nat ;
   char *chaine ;
   int nol ;
   int noc ;
   int value ;
   int noreg ;
   champs_inst s_i ;
};
typedef struct __anonstruct_Lexeme_8 Lexeme;
enum __anonenum_NomZone_9 {
    Z_TEXT = 0,
    Z_DATA = 1,
    Z_BSS = 2,
    Z_NONE = 3
} ;
typedef enum __anonenum_NomZone_9 NomZone;
enum __anonenum_DirReserv_10 {
    R_WORD = 0,
    R_HALF = 1,
    R_BYTE = 2,
    R_ASCIZ = 3,
    R_ASCII = 4,
    R_INT = 5,
    R_ETIQ = 6
} ;
typedef enum __anonenum_DirReserv_10 DirReserv;
enum __anonenum_NatLigneLog_11 {
    LL_NONE = 0,
    LL_ETIQ = 1,
    LL_CTE = 2,
    LL_INST = 3,
    LL_SECT = 4,
    LL_EXPORT = 5,
    LL_RESERV_N_INIT = 6,
    LL_RESERV_INIT = 7,
    LL_ALIGN = 8
} ;
typedef enum __anonenum_NatLigneLog_11 NatLigneLog;
enum __anonenum_NatParamInst_12 {
    P_IMMEDIAT = 0,
    P_EXP = 1,
    P_NOMREG = 2,
    P_NOMREG_EXCL = 3,
    P_ETIQUETTE = 4,
    P_SHIFT = 5,
    P_INDIR = 6,
    P_REGS = 7
} ;
typedef enum __anonenum_NatParamInst_12 NatParamInst;
enum __anonenum_NatParamIndir_13 {
    IND_IMM = 0,
    IND_EXP_ETIQ = 1,
    IND_EXP = 2,
    IND_NOMREG = 3,
    IND_NOMREG_SHIFT = 4
} ;
typedef enum __anonenum_NatParamIndir_13 NatParamIndir;
enum __anonenum_SigneParam_14 {
    S_PLUS = 0,
    S_MOINS = 1
} ;
typedef enum __anonenum_SigneParam_14 SigneParam;
enum __anonenum_NatParamReserv_15 {
    PR_CHAINE = 0,
    PR_NOMBRE = 1,
    PR_ETIQUETTE = 2
} ;
typedef enum __anonenum_NatParamReserv_15 NatParamReserv;
struct __anonstruct_ExpImmEtiq_16 {
   NatParamInst nat ;
   char *nom_etiq ;
   long valimm ;
};
typedef struct __anonstruct_ExpImmEtiq_16 ExpImmEtiq;
struct __anonstruct_ParamExp_17 {
   NatParamInst nat ;
   long valimm ;
   char *nom_etiq ;
   SigneParam signe ;
   int nbexp ;
   ExpImmEtiq tabexp[5] ;
};
typedef struct __anonstruct_ParamExp_17 ParamExp;
struct __anonstruct_ParamInstShift_18 {
   char *dir_shift ;
   NatParamInst nat ;
   long valimmshift ;
   int noregshift ;
};
typedef struct __anonstruct_ParamInstShift_18 ParamInstShift;
struct __anonstruct_indir_21 {
   int nbelt ;
   int noreg1 ;
   NatParamIndir nat ;
   ParamExp exp ;
   int noreg2 ;
   SigneParam signe ;
   ParamInstShift exp_shift ;
};
union __anonunion_u_20 {
   ParamExp exp ;
   int noreg ;
   struct __anonstruct_indir_21 indir ;
   int regs[16] ;
   ParamInstShift exp_shift ;
};
struct __anonstruct_ParamInst_19 {
   NatParamInst nat ;
   union __anonunion_u_20 u ;
};
typedef struct __anonstruct_ParamInst_19 ParamInst;
struct __anonstruct_ParamReserv_22 {
   NatParamReserv nat ;
   long nb ;
   char *nom_etiq ;
   char *chaine ;
};
typedef struct __anonstruct_ParamReserv_22 ParamReserv;
struct __anonstruct_cte_25 {
   char *etiq ;
   int valcte ;
};
struct __anonstruct_uinst_26 {
   char *mnemo ;
   champs_inst s_i ;
   int nbp ;
   ParamInst p[4] ;
};
struct __anonstruct_urni_27 {
   DirReserv dir ;
   int nboctets ;
   char *etiq ;
};
struct __anonstruct_uri_28 {
   DirReserv dir ;
   ParamReserv p0 ;
};
union __anonunion_u_24 {
   char *nom_etiq ;
   struct __anonstruct_cte_25 cte ;
   struct __anonstruct_uinst_26 uinst ;
   char *nom_globl ;
   NomZone sect ;
   struct __anonstruct_urni_27 urni ;
   struct __anonstruct_uri_28 uri ;
   unsigned int align ;
};
struct __anonstruct_LigneLog_23 {
   NatLigneLog nat ;
   union __anonunion_u_24 u ;
};
typedef struct __anonstruct_LigneLog_23 LigneLog;
struct __anonstruct_Elem_29 {
   long ad_dans_zone ;
   NomZone zone_cour ;
   int nl_source ;
   LigneLog ligne ;
   long nb_bits ;
};
typedef struct __anonstruct_Elem_29 Elem;
struct _taillesDeSections {
   int theTextZone_nelem ;
   int theDataZone_nelem ;
   int theCharTable_size ;
   int theSymbolTable_nelem ;
};
typedef struct _taillesDeSections taillesDeSections;
enum __anonenum_LocGlob_30 {
    Local = 0,
    Global = 1
} ;
typedef enum __anonenum_LocGlob_30 LocGlob;
struct _asymbol {
   unsigned long AdressInCharTable ;
   unsigned long Value ;
   NomZone Zone ;
   LocGlob portee ;
};
typedef struct _asymbol Asymbol;
enum __anonenum_CodeErreur_31 {
    NOERR = 0,
    FIN_LIGNE = 1,
    DEB_LIGNE = 2,
    ERR_LEX = 3,
    INT_ATTENDU = 4,
    INT_ALIGN_ATTENDU = 5,
    CHAINE_ATTENDUE = 6,
    VIRGULE_ATTENDUE = 7,
    TROP_PARAM_INST = 8,
    ZERO_PARAM_INST = 9,
    NB_ETIQ_ATTENDUS = 10,
    PAROUV_ATTENDUE = 11,
    PARFERM_ATTENDUE = 12,
    DIRECTIVE_ATTENDUE = 13,
    DIRECTIVE_INCONNUE = 14,
    NOM_REG_ATTENDU = 15,
    ETIQUETTE_ATTENDUE = 16,
    INSTRUCTION_ATTENDUE = 17,
    MOINS_ATTENDU = 18,
    INT_OU_ETIQ_ATTENDU = 19,
    DIESE_PLUS_MOINS_REG = 20,
    DIR_SHIFT_ATTENDUE = 21,
    TROP_EXP = 22,
    DEB_PARAM_INST = 23,
    DEB_EXPRESSION = 24,
    NO_END = 25,
    DEUXPOINTS_ATTENDU = 26,
    ACCOLFERM_ATTENDUE = 27,
    CROCHFERM_ATTENDU = 28
} ;
typedef enum __anonenum_CodeErreur_31 CodeErreur;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
extern  __attribute__((__nothrow__)) int sprintf(char * __restrict  __s ,
                                                 char const   * __restrict  __format 
                                                 , ...) ;
static FILE *OuvreFichIntermediaire(char *nom_fich ) 
{ FILE *tmp ;
  
  {/*sid:1*/
  tmp = fopen((char const   *)nom_fich, (char const   *)"w");
  /*sid:1*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(OuvreFichIntermediaire) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(nom_fich) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(nom_fich) = G(nom_fich)*/
  /*T(tmp) = U*/
  /*T(global) = G(global)*/
  
  /*sid:2*/
  return (tmp);
  /*sid:2*/
  /*T(OuvreFichIntermediaire) = U*/
  }

}
int global ;
extern int ( /* missing proto */  taint)() ;
extern int ( /* missing proto */  strcpy)() ;
extern int ( /* missing proto */  strlen)() ;
void Phase1(FILE *fsource , FILE *finterm ) ;
int main(int argc , char **argv ) 
{ FILE *fsource ;
  FILE *finterm ;
  char nom_out[100] ;
  char nom_in[100] ;
  int l ;
  int __retres ;
  
  {/*sid:3*/
  argc = taint();
  /*sid:3*/
  /*T(main) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(argc) + G(argv) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  /*T(argc) = T*/
  /*T(argv) = G(argv)*/
  /*T(fsource) = U*/
  /*T(finterm) = U*/
  /*T(nom_out) = U*/
  /*T(nom_in) = U*/
  /*T(l) = U*/
  
  /*sid:4*/
  argv = (char **)taint();
  /*sid:4*/
  /*T(argv) = T*/
  
  if (argc < 2)
  {/*sid:7*/
  printf((char const   *)"Usage %s <inputfile> \n", *(argv + 0));
  /*sid:7*/
  /*T(LeProg) = T*/
  /*T(nbLigneLog) = T*/
  /*T(lesTaillesDeSections) = T*/
  /*T(TheCharTable) = T*/
  /*T(TheSymbolTable) = T*/
  /*T(global) = T*/
  
  /*sid:8*/
  __retres = 1;
  /*sid:8*/
  /*T(__retres) = T*/
  
  goto return_label;}
  else {if (argc > 2)
        {/*sid:11*/
        printf((char const   *)"Usage %s <inputfile> \n", *(argv + 0));
        /*sid:11*/
        /*T(LeProg) = T*/
        /*T(nbLigneLog) = T*/
        /*T(lesTaillesDeSections) = T*/
        /*T(TheCharTable) = T*/
        /*T(TheSymbolTable) = T*/
        /*T(global) = T*/
        
        /*sid:12*/
        __retres = 1;
        /*sid:12*/
        /*T(__retres) = T*/
        
        goto return_label;}
        else {/*sid:13*/
        fsource = fopen((char const   *)*(argv + 1), (char const   *)"r");
        /*sid:13*/
        /*T(fsource) = T*/
        
        if (fsource == (void *)0) {/*sid:15*/
          printf((char const   *)"%s : impossible d\'ouvrir : %s\n",
                 *(argv + 0), *(argv + 1));
          /*sid:15*/
          /*T(LeProg) = T*/
          /*T(nbLigneLog) = T*/
          /*T(lesTaillesDeSections) = T*/
          /*T(TheCharTable) = T*/
          /*T(TheSymbolTable) = T*/
          /*T(global) = T*/
          
          /*sid:16*/
          __retres = 1;
          /*sid:16*/
          /*T(__retres) = T*/
          
          goto return_label;}
        }
  }
  
  /*sid:18*/
  sprintf((char *)(nom_in), (char const   *)"%s", *(argv + 1));
  /*sid:18*/
  /*T(LeProg) = T*/
  /*T(nbLigneLog) = T*/
  /*T(lesTaillesDeSections) = T*/
  /*T(TheCharTable) = T*/
  /*T(TheSymbolTable) = T*/
  /*T(global) = T*/
  
  strcpy(nom_out, nom_in);
  /*sid:20*/
  l = strlen(nom_out);
  /*sid:20*/
  /*T(l) = T*/
  
  /*sid:21*/
  nom_out[l - 1] = (char )'a';
  /*sid:21*/
  /*T(nom_out) = T*/
  
  nom_out[l] = (char )'l';
  nom_out[l + 1] = (char )'f';
  nom_out[l + 2] = (char )'\000';
  /*sid:25*/
  finterm = OuvreFichIntermediaire(nom_out);
  /*sid:25*/
  /*T(finterm) = T*/
  
  if (! finterm) {printf((char const   *)"Impossible d\'ouvrir le fichier intermediaire - arret \n");
    /*sid:28*/
    __retres = 4;
    /*sid:28*/
    /*T(__retres) = T*/
    
    goto return_label;}
  
  Phase1(fsource, finterm);
  /*sid:32*/
  __retres = 0;
  /*sid:32*/
  /*T(__retres) = T*/
  
  /*sid:1387*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1387*/
  /*T(main) = T*/
  /*T(fsource) = T*/
  /*T(finterm) = T*/
  /*T(nom_out) = T*/
  /*T(l) = T*/
  }

}
extern int fclose(FILE *__stream ) ;
extern int fprintf(FILE * __restrict  __stream ,
                   char const   * __restrict  __format  , ...) ;
void DemLex(FILE *fpin ) 
{ 
  
  /*sid:1388*/
  return;
  /*sid:1388*/
  /*T(DemLex) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(fpin) = G(fpin)*/
  /*T(global) = G(global)*/
  

}
void AvLex(void) 
{ 
  
  /*sid:1389*/
  return;
  /*sid:1389*/
  /*T(AvLex) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  

}
Lexeme LexCour(void) 
{ Lexeme l ;
  
  /*sid:35*/
  return (l);
  /*sid:35*/
  /*T(LexCour) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(l) = U*/
  /*T(global) = G(global)*/
  

}
int FinLex(void) 
{ int __retres ;
  
  {/*sid:36*/
  __retres = 0;
  /*sid:36*/
  /*T(FinLex) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  /*sid:1390*/
  return (__retres);
  /*sid:1390*/
  /*T(FinLex) = U*/
  }

}
static Elem LeProg[1000] ;
static int nbLigneLog ;
static int DumpParamExp(ParamExp p ) ;
static int DumpExpImmEtiq(ExpImmEtiq exp ) ;
static int DumpParamInstShift(ParamInstShift p ) ;
static int DumpParamInst(ParamInst p ) ;
static int DumpParamReserv(ParamReserv p ) ;
void DumpSdd(Elem *LeProg_0 , int nbLigneLog_0 ) ;
extern int ( /* missing proto */  exit)() ;
static char *NatLigneLog2String(NatLigneLog nat ) 
{ char *__retres ;
  
  {/*sid:37*/
  switch ((int )nat) {/*sid:38*/
  case LL_ETIQ: 
  __retres = (char *)"LL_ETIQ ";
  /*sid:38*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:39*/
  case LL_INST: 
  __retres = (char *)"LL_INST ";
  /*sid:39*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:40*/
  case LL_CTE: 
  __retres = (char *)"LL_CTE ";
  /*sid:40*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:41*/
  case LL_SECT: 
  __retres = (char *)"LL_SECT ";
  /*sid:41*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:42*/
  case LL_EXPORT: 
  __retres = (char *)"LL_EXPORT ";
  /*sid:42*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:43*/
  case LL_RESERV_INIT: 
  __retres = (char *)"LL_RESERV_INIT ";
  /*sid:43*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:44*/
  case LL_RESERV_N_INIT: 
  __retres = (char *)"LL_RESERV_N_INIT ";
  /*sid:44*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:45*/
  case LL_ALIGN: 
  __retres = (char *)"LL_ALIGN ";
  /*sid:45*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:46*/
  case LL_NONE: 
  __retres = (char *)"LL_NONE ";
  /*sid:46*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in NatLigneLog2String\n");
  /*sid:49*/
  exit(1);
  /*sid:49*/
  /*T(__retres) = G(nat)*/
  }
  
  /*sid:37*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(NatLigneLog2String) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(nat) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(nat) = G(nat)*/
  /*T(global) = G(global)*/
  
  /*sid:1400*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1400*/
  /*T(NatLigneLog2String) = G(nat)*/
  }

}
extern char *NomZone2String(NomZone n ) 
{ char *__retres ;
  
  {/*sid:50*/
  switch ((int )n) {/*sid:51*/
  case Z_TEXT: 
  __retres = (char *)"TEXT";
  /*sid:51*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:52*/
  case Z_DATA: 
  __retres = (char *)"DATA";
  /*sid:52*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:53*/
  case Z_BSS: 
  __retres = (char *)"BSS";
  /*sid:53*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:54*/
  case Z_NONE: 
  __retres = (char *)"UNDF";
  /*sid:54*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in NomZone2String\n");
  /*sid:57*/
  exit(1);
  /*sid:57*/
  /*T(__retres) = G(n)*/
  }
  
  /*sid:50*/
  /*T(NomZone2String) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(n) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(n) = G(n)*/
  /*T(global) = G(global)*/
  
  /*sid:1405*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1405*/
  /*T(NomZone2String) = G(n)*/
  }

}
static char *DirReserv2Char(DirReserv d ) 
{ char *__retres ;
  
  {/*sid:58*/
  switch ((int )d) {/*sid:59*/
  case R_WORD: 
  __retres = (char *)"word";
  /*sid:59*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:60*/
  case R_HALF: 
  __retres = (char *)"half";
  /*sid:60*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:61*/
  case R_BYTE: 
  __retres = (char *)"byte";
  /*sid:61*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:62*/
  case R_ASCIZ: 
  __retres = (char *)"asciz";
  /*sid:62*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:63*/
  case R_ASCII: 
  __retres = (char *)"ascii";
  /*sid:63*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:64*/
  case R_INT: 
  __retres = (char *)"int";
  /*sid:64*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  /*sid:65*/
  case R_ETIQ: 
  __retres = (char *)"etiq";
  /*sid:65*/
  /*T(__retres) = G(d)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in DirReserv2Char\n");
  /*sid:68*/
  exit(1);
  /*sid:68*/
  /*T(__retres) = G(d)*/
  }
  
  /*sid:58*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(DirReserv2Char) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(d) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(d) = G(d)*/
  /*T(global) = G(global)*/
  
  /*sid:1413*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1413*/
  /*T(DirReserv2Char) = G(d)*/
  }

}
static char *NatParamInst2String(NatParamInst nat ) 
{ char *__retres ;
  
  {/*sid:69*/
  switch ((int )nat) {/*sid:70*/
  case P_IMMEDIAT: 
  __retres = (char *)"P_IMMEDIAT";
  /*sid:70*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:71*/
  case P_EXP: 
  __retres = (char *)"P_EXP";
  /*sid:71*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:72*/
  case P_NOMREG: 
  __retres = (char *)"P_NOMREG";
  /*sid:72*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:73*/
  case P_NOMREG_EXCL: 
  __retres = (char *)"P_NOMREG_EXCL";
  /*sid:73*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:74*/
  case P_ETIQUETTE: 
  __retres = (char *)"P_ETIQUETTE";
  /*sid:74*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:75*/
  case P_INDIR: 
  __retres = (char *)"P_INDIR";
  /*sid:75*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:76*/
  case P_SHIFT: 
  __retres = (char *)"P_SHIFT";
  /*sid:76*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  /*sid:77*/
  case P_REGS: 
  __retres = (char *)"P_REGS";
  /*sid:77*/
  /*T(__retres) = G(nat)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in NatParamInst2String\n");
  /*sid:80*/
  exit(1);
  /*sid:80*/
  /*T(__retres) = G(nat)*/
  }
  
  /*sid:69*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(NatParamInst2String) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(nat) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(nat) = G(nat)*/
  /*T(global) = G(global)*/
  
  /*sid:1422*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1422*/
  /*T(NatParamInst2String) = G(nat)*/
  }

}
static int DumpParamExp(ParamExp p ) 
{ int i ;
  char *tmp ;
  int __retres ;
  
  {/*sid:81*/
  tmp = NatParamInst2String(p.nat);
  /*sid:81*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(DumpParamExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(p) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(p) = G(p)*/
  /*T(i) = U*/
  /*T(tmp) = G(p)*/
  /*T(global) = G(global)*/
  
  /*sid:82*/
  printf((char const   *)" %s ", tmp);
  /*sid:82*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(global) = G(p)*/
  
  switch ((int )p.nat) {case P_IMMEDIAT: ;
  printf((char const   *)"%5d ", p.valimm);
  break;
  case P_ETIQUETTE: ;
  printf((char const   *)"%15s ", p.nom_etiq);
  break;
  case P_EXP: ;
  printf((char const   *)"(");
  /*sid:92*/
  i = 0;
  /*sid:92*/
  /*T(i) = G(p)*/
  
  while (i < p.nbexp) {DumpExpImmEtiq(p.tabexp[i]);
    printf((char const   *)" - ");
    i ++;}
  
  printf((char const   *)")");
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in DumpParamExp\n");
  /*sid:104*/
  exit(1);
  /*sid:104*/
  /*T(i) = G(p)*/
  }
  
  /*sid:105*/
  __retres = 0;
  /*sid:105*/
  /*T(i) = G(p)*/
  
  /*sid:1423*/
  return (__retres);
  /*sid:1423*/
  /*T(DumpParamExp) = U*/
  }

}
static int DumpExpImmEtiq(ExpImmEtiq exp ) 
{ int __retres ;
  
  {/*sid:106*/
  switch ((int )exp.nat) {case P_IMMEDIAT: ;
  /*sid:108*/
  printf((char const   *)"%d", exp.valimm);
  /*sid:108*/
  /*T(LeProg) = G(exp)*/
  /*T(nbLigneLog) = G(exp)*/
  /*T(lesTaillesDeSections) = G(exp)*/
  /*T(TheCharTable) = G(exp)*/
  /*T(TheSymbolTable) = G(exp)*/
  /*T(global) = G(exp)*/
  
  break;
  case P_ETIQUETTE: ;
  /*sid:111*/
  printf((char const   *)"%s", exp.nom_etiq);
  /*sid:111*/
  /*T(LeProg) = G(exp)*/
  /*T(nbLigneLog) = G(exp)*/
  /*T(lesTaillesDeSections) = G(exp)*/
  /*T(TheCharTable) = G(exp)*/
  /*T(TheSymbolTable) = G(exp)*/
  /*T(global) = G(exp)*/
  
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in DumpExpImmEtiq\n");
  /*sid:115*/
  exit(1);
  /*sid:115*/
  /*T(LeProg) = G(LeProg) + G(exp)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(exp)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(exp)*/
  /*T(TheCharTable) = G(TheCharTable) + G(exp)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(exp)*/
  /*T(global) = G(global) + G(exp)*/
  }
  
  /*sid:106*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(DumpExpImmEtiq) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(exp) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(exp) = G(exp)*/
  /*T(global) = G(global)*/
  
  /*sid:116*/
  __retres = 0;
  /*sid:116*/
  /*T(LeProg) = G(LeProg) + G(exp)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(exp)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(exp)*/
  /*T(TheCharTable) = G(TheCharTable) + G(exp)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(exp)*/
  /*T(global) = G(global) + G(exp)*/
  
  /*sid:1424*/
  return (__retres);
  /*sid:1424*/
  /*T(DumpExpImmEtiq) = U*/
  }

}
extern int ( /* missing proto */  strcmp)() ;
static int DumpParamInstShift(ParamInstShift p ) 
{ int tmp ;
  int __retres ;
  
  {/*sid:117*/
  printf((char const   *)" %s ", p.dir_shift);
  /*sid:117*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(DumpParamInstShift) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(p) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(__retres) = U*/
  /*T(p) = G(p)*/
  /*T(tmp) = U*/
  /*T(global) = G(p)*/
  
  /*sid:118*/
  tmp = strcmp(p.dir_shift, "RRX");
  /*sid:118*/
  /*T(tmp) = G(p)*/
  
  if (tmp) {if ((int )p.nat == (int )P_NOMREG)
            {printf((char const   *)" r%d ", p.noregshift);}
            else {printf((char const   *)" %d ", p.valimmshift);}
    }
  
  /*sid:125*/
  __retres = 0;
  /*sid:125*/
  /*T(__retres) = G(p)*/
  
  /*sid:1425*/
  return (__retres);
  /*sid:1425*/
  /*T(DumpParamInstShift) = G(p)*/
  }

}
static int DumpParamInst(ParamInst p ) 
{ int i ;
  char *tmp ;
  int __retres ;
  
  {/*sid:126*/
  tmp = NatParamInst2String(p.nat);
  /*sid:126*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(DumpParamInst) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(p) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(p) = G(p)*/
  /*T(i) = U*/
  /*T(tmp) = G(p)*/
  /*T(global) = G(global)*/
  
  /*sid:127*/
  printf((char const   *)" %10s ", tmp);
  /*sid:127*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(global) = G(p)*/
  
  switch ((int )p.nat) {case P_EXP: ;
  DumpParamExp(p.u.exp);
  break;
  case P_NOMREG: 
  case P_NOMREG_EXCL: ;
  printf((char const   *)"r%d ", p.u.noreg);
  if ((int )p.nat == (int )P_NOMREG_EXCL) {printf((char const   *)" ! ");}
  
  break;
  case P_INDIR: ;
  printf((char const   *)"[");
  if (p.u.indir.nbelt >= 1) {printf((char const   *)"r%d", p.u.indir.noreg1);}
  
  if (p.u.indir.nbelt == 2) {switch ((int )p.u.indir.nat) {case IND_EXP: ;
                             printf((char const   *)", ");
                             DumpParamExp(p.u.indir.exp);
                             break;
                             case IND_NOMREG: 
                             case IND_NOMREG_SHIFT: ;
                             if ((int )p.u.indir.signe == (int )S_MOINS)
                             {printf((char const   *)", -r%d",
                                     p.u.indir.noreg2);}
                             else {printf((char const   *)", r%d",
                                          p.u.indir.noreg2);}
                             
                             if ((int )p.u.indir.nat == (int )IND_NOMREG_SHIFT) {
                               DumpParamInstShift(p.u.indir.exp_shift);}
                             
                             break;}
    }
  
  printf((char const   *)" ] ");
  break;
  case P_REGS: ;
  printf((char const   *)"{");
  /*sid:166*/
  i = 0;
  /*sid:166*/
  /*T(i) = G(p)*/
  
  while (i <= 16) {if (p.u.regs[i] == 1) {printf((char const   *)"r%d, ", i);}
    
    i ++;}
  
  printf((char const   *)"}");
  break;
  case P_SHIFT: ;
  DumpParamInstShift(p.u.exp_shift);
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in DumpParamInst\n");
  /*sid:183*/
  exit(1);
  /*sid:183*/
  /*T(LeProg) = G(LeProg) + G(p)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(p)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(p)*/
  /*T(TheCharTable) = G(TheCharTable) + G(p)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(p)*/
  /*T(i) = G(p)*/
  /*T(global) = G(global) + G(p)*/
  }
  
  /*sid:184*/
  __retres = 0;
  /*sid:184*/
  /*T(LeProg) = G(LeProg) + G(p)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(p)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(p)*/
  /*T(TheCharTable) = G(TheCharTable) + G(p)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(p)*/
  /*T(__retres) = G(p)*/
  /*T(i) = G(p)*/
  /*T(global) = G(global) + G(p)*/
  
  /*sid:1426*/
  return (__retres);
  /*sid:1426*/
  /*T(DumpParamInst) = G(p)*/
  }

}
static int DumpParamReserv(ParamReserv p ) 
{ int __retres ;
  
  {/*sid:185*/
  switch ((int )p.nat) {case PR_CHAINE: ;
  /*sid:187*/
  printf((char const   *)"%s", p.chaine);
  /*sid:187*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(global) = G(p)*/
  
  break;
  case PR_NOMBRE: ;
  /*sid:190*/
  printf((char const   *)"%d", p.nb);
  /*sid:190*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(global) = G(p)*/
  
  break;
  case PR_ETIQUETTE: ;
  /*sid:193*/
  printf((char const   *)"%s", p.nom_etiq);
  /*sid:193*/
  /*T(LeProg) = G(p)*/
  /*T(nbLigneLog) = G(p)*/
  /*T(lesTaillesDeSections) = G(p)*/
  /*T(TheCharTable) = G(p)*/
  /*T(TheSymbolTable) = G(p)*/
  /*T(global) = G(p)*/
  
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in DumpParamReserv\n");
  /*sid:197*/
  exit(1);
  /*sid:197*/
  /*T(LeProg) = G(LeProg) + G(p)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(p)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(p)*/
  /*T(TheCharTable) = G(TheCharTable) + G(p)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(p)*/
  /*T(global) = G(global) + G(p)*/
  }
  
  /*sid:185*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(DumpParamReserv) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(p) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(p) = G(p)*/
  /*T(global) = G(global)*/
  
  /*sid:198*/
  __retres = 0;
  /*sid:198*/
  /*T(LeProg) = G(LeProg) + G(p)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(p)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(p)*/
  /*T(TheCharTable) = G(TheCharTable) + G(p)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(p)*/
  /*T(global) = G(global) + G(p)*/
  
  /*sid:1427*/
  return (__retres);
  /*sid:1427*/
  /*T(DumpParamReserv) = U*/
  }

}
static void DumpSplitInst(champs_inst s_i ) 
{ 
  
  {/*sid:199*/
  printf((char const   *)" %5s-%2s-%1d-%c-%1d-%1d-%2s ", s_i.base, s_i.cond,
         s_i.cod_cond, s_i.BHW, s_i.S, s_i.T, s_i.pile);
  /*sid:199*/
  /*T(LeProg) = G(s_i)*/
  /*T(nbLigneLog) = G(s_i)*/
  /*T(DumpSplitInst) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(s_i) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(s_i)*/
  /*T(TheCharTable) = G(s_i)*/
  /*T(TheSymbolTable) = G(s_i)*/
  /*T(s_i) = G(s_i)*/
  /*T(global) = G(s_i)*/
  
  /*sid:1428*/
  return;
  /*sid:1428*/
  /*T(DumpSplitInst) = U*/
  }

}
void DumpSdd(Elem *LeProg_0 , int nbLigneLog_0 ) 
{ int i ;
  int p ;
  LigneLog L ;
  char *tmp ;
  char *tmp_0 ;
  char *tmp_1 ;
  char *tmp_2 ;
  
  {/*sid:201*/
  printf((char const   *)"|     |     |     |    |\n");
  /*sid:201*/
  /*T(DumpSdd) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
  /*T(i) = U*/
  /*T(p) = U*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(global) = G(global)*/
  
  printf((char const   *)"|No_lg|ZONE |@dsZ |taye|nature ligne ... \n");
  i = 0;
  /*sid:204*/
  while (i < nbLigneLog_0) {L = (LeProg_0 + i)->ligne;
    /*sid:210*/
    printf((char const   *)"|%4d ", (LeProg_0 + i)->nl_source);
    /*sid:210*/
    /*T(LeProg) = G(LeProg_0) + G(nbLigneLog_0)*/
    /*T(nbLigneLog) = G(LeProg_0) + G(nbLigneLog_0)*/
    /*T(lesTaillesDeSections) = G(LeProg_0) + G(nbLigneLog_0)*/
    /*T(TheCharTable) = G(LeProg_0) + G(nbLigneLog_0)*/
    /*T(TheSymbolTable) = G(LeProg_0) + G(nbLigneLog_0)*/
    /*T(global) = G(LeProg_0) + G(nbLigneLog_0)*/
    
    tmp = NomZone2String((LeProg_0 + i)->zone_cour);
    printf((char const   *)"|%s ", tmp);
    printf((char const   *)"|%4d ", (LeProg_0 + i)->ad_dans_zone);
    printf((char const   *)"| %2d ", (LeProg_0 + i)->nb_bits);
    tmp_0 = NatLigneLog2String(L.nat);
    printf((char const   *)"|%15s ", tmp_0);
    switch ((int )L.nat) {case LL_ETIQ: ;
    printf((char const   *)"%10s ", L.u.nom_etiq);
    break;
    case LL_CTE: ;
    printf((char const   *)"%10s ", L.u.cte.etiq);
    printf((char const   *)"%d", L.u.cte.valcte);
    break;
    case LL_INST: ;
    printf((char const   *)"%10s ", L.u.uinst.mnemo);
    DumpSplitInst(L.u.uinst.s_i);
    p = 0;
    while (p < L.u.uinst.nbp) {DumpParamInst(L.u.uinst.p[p]);
      printf((char const   *)", ");
      p ++;}
    
    break;
    case LL_EXPORT: ;
    printf((char const   *)" %10s ", L.u.nom_globl);
    break;
    case LL_SECT: 
    tmp_1 = NomZone2String(L.u.sect);
    printf((char const   *)"%s ", tmp_1);
    break;
    case LL_RESERV_N_INIT: ;
    if ((int )L.u.urni.dir == (int )R_INT)
    {printf((char const   *)"%10d  ", L.u.urni.nboctets);}
    else {printf((char const   *)"%s", L.u.urni.etiq);}
    
    break;
    case LL_RESERV_INIT: 
    tmp_2 = DirReserv2Char(L.u.uri.dir);
    printf((char const   *)"%s ", tmp_2);
    DumpParamReserv(L.u.uri.p0);
    break;
    case LL_ALIGN: ;
    printf((char const   *)"%10d  ", L.u.align);
    break;
    case LL_NONE: 
    break;
    default: ;
    printf((char const   *)"Oups! Internal error in DumpSdd\n");
    exit(1);}
    
    printf((char const   *)"\n");
    /*sid:261*/
    i ++;
    /*sid:261*/
    /*T(LeProg) = G(nbLigneLog_0) + G(LeProg_0) + G(LeProg)*/
    /*T(nbLigneLog) = G(nbLigneLog_0) + G(LeProg_0) + G(nbLigneLog)*/
    /*T(lesTaillesDeSections) = G(nbLigneLog_0) + G(LeProg_0) + G(lesTaillesDeSections)*/
    /*T(TheCharTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheCharTable)*/
    /*T(TheSymbolTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheSymbolTable)*/
    /*T(global) = G(nbLigneLog_0) + G(LeProg_0) + G(global)*/
    }
  
  /*sid:204*/
  /*T(LeProg) = G(nbLigneLog_0) + G(LeProg_0) + G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog_0) + G(LeProg_0) + G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(nbLigneLog_0) + G(LeProg_0) + G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheCharTable)*/
  /*T(TheSymbolTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheSymbolTable)*/
  /*T(i) = G(nbLigneLog_0)*/
  /*T(p) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp_0) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp_1) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp_2) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(global) = G(nbLigneLog_0) + G(LeProg_0) + G(global)*/
  
  /*sid:1429*/
  return;
  /*sid:1429*/
  /*T(DumpSdd) = U*/
  }

}
static char *CodeErreur2String(CodeErreur c ) 
{ char *__retres ;
  
  {/*sid:263*/
  switch ((int )c) {/*sid:264*/
  case NOERR: 
  __retres = (char *)"";
  /*sid:264*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:265*/
  case FIN_LIGNE: 
  __retres = (char *)"Il manque un saut de ligne";
  /*sid:265*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:266*/
  case DEB_LIGNE: 
  __retres = (char *)"Mauvais debut de ligne";
  /*sid:266*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:267*/
  case ERR_LEX: 
  __retres = (char *)"Lexeme inconnu";
  /*sid:267*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:268*/
  case INT_ATTENDU: 
  __retres = (char *)"Entier attendu";
  /*sid:268*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:269*/
  case INT_ALIGN_ATTENDU: 
  __retres = (char *)"1, 2, 4 ou 8 attendu comme param\350tre de .align";
  /*sid:269*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:270*/
  case CHAINE_ATTENDUE: 
  __retres = (char *)"cha\356ne de caract\350res attendue";
  /*sid:270*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:271*/
  case VIRGULE_ATTENDUE: 
  __retres = (char *)"virgule attendue";
  /*sid:271*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:272*/
  case TROP_PARAM_INST: 
  __retres = (char *)"une instruction ne peut pas avoir plus de 3 parametres";
  /*sid:272*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:273*/
  case ZERO_PARAM_INST: 
  __retres = (char *)"une instruction doit avoir au moins 1 parametre";
  /*sid:273*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:274*/
  case NB_ETIQ_ATTENDUS: 
  __retres = (char *)"Nombre ou etiquette attendus";
  /*sid:274*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:275*/
  case PAROUV_ATTENDUE: 
  __retres = (char *)"parenthese ouvrante attendue";
  /*sid:275*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:276*/
  case PARFERM_ATTENDUE: 
  __retres = (char *)"parenthese fermante attendue";
  /*sid:276*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:277*/
  case DIRECTIVE_ATTENDUE: 
  __retres = (char *)"directive attendue";
  /*sid:277*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:278*/
  case DIRECTIVE_INCONNUE: 
  __retres = (char *)"directive inconnue";
  /*sid:278*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:279*/
  case ETIQUETTE_ATTENDUE: 
  __retres = (char *)"etiquette attendue";
  /*sid:279*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:280*/
  case NOM_REG_ATTENDU: 
  __retres = (char *)"nom de registre attendu";
  /*sid:280*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:281*/
  case INT_OU_ETIQ_ATTENDU: 
  __retres = (char *)"entier ou symbole attendu";
  /*sid:281*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:282*/
  case DIESE_PLUS_MOINS_REG: 
  __retres = (char *)"diese ou (+/-)registre attendu";
  /*sid:282*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:283*/
  case DIR_SHIFT_ATTENDUE: 
  __retres = (char *)"directive lsl, lsr, asr, ror ou rrx attendue";
  /*sid:283*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:284*/
  case TROP_EXP: 
  __retres = (char *)"trop d\'expressions dans une liste d\'expressions";
  /*sid:284*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:285*/
  case DEB_PARAM_INST: 
  __retres = (char *)"debut de parametre d\'instruction incorrect";
  /*sid:285*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:286*/
  case DEB_EXPRESSION: 
  __retres = (char *)"entier, etiquette, +, - ou ( attendu";
  /*sid:286*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:287*/
  case NO_END: 
  __retres = (char *)"directive END attendue";
  /*sid:287*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:288*/
  case DEUXPOINTS_ATTENDU: 
  __retres = (char *)"\':\' attendu";
  /*sid:288*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:289*/
  case ACCOLFERM_ATTENDUE: 
  __retres = (char *)"\'}\' attendu";
  /*sid:289*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  /*sid:290*/
  case CROCHFERM_ATTENDU: 
  __retres = (char *)"\']\' attendu";
  /*sid:290*/
  /*T(__retres) = G(c)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in CodeErreur2String\n");
  /*sid:293*/
  exit(1);
  /*sid:293*/
  /*T(__retres) = G(c)*/
  }
  
  /*sid:263*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(CodeErreur2String) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(c) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(c) = G(c)*/
  /*T(global) = G(global)*/
  
  /*sid:1457*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1457*/
  /*T(CodeErreur2String) = G(c)*/
  }

}
void ErreurSynt(CodeErreur c , Lexeme L ) 
{ char *tmp ;
  
  {/*sid:294*/
  tmp = CodeErreur2String(c);
  /*sid:294*/
  /*T(ErreurSynt) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(c) + G(L) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(c) = G(c)*/
  /*T(L) = G(L)*/
  /*T(tmp) = G(c)*/
  /*T(global) = G(global)*/
  
  /*sid:295*/
  printf((char const   *)"Erreur : %s -- pres du lexeme ligne %d, colonne %d\n",
         tmp, L.nol, L.noc);
  /*sid:295*/
  /*T(LeProg) = G(c)*/
  /*T(nbLigneLog) = G(c)*/
  /*T(lesTaillesDeSections) = G(c)*/
  /*T(TheCharTable) = G(c)*/
  /*T(TheSymbolTable) = G(c)*/
  /*T(global) = G(c)*/
  
  exit(1);
  /*sid:1458*/
  return;
  /*sid:1458*/
  /*T(ErreurSynt) = U*/
  }

}
static CodeErreur CodeDeLexAttendu(NomLexeme n ) 
{ CodeErreur __retres ;
  
  {/*sid:297*/
  switch ((int )n) {/*sid:298*/
  case NL: 
  __retres = FIN_LIGNE;
  /*sid:298*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:299*/
  case ETIQUETTE: 
  __retres = ETIQUETTE_ATTENDUE;
  /*sid:299*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:300*/
  case NOM_REG: 
  __retres = NOM_REG_ATTENDU;
  /*sid:300*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:301*/
  case DIRECTIVE: 
  __retres = DIRECTIVE_ATTENDUE;
  /*sid:301*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:302*/
  case INSTRUCTION: 
  __retres = INSTRUCTION_ATTENDUE;
  /*sid:302*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:303*/
  case INTEGER: 
  __retres = INT_ATTENDU;
  /*sid:303*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:304*/
  case CHAINE: 
  __retres = CHAINE_ATTENDUE;
  /*sid:304*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:305*/
  case VIRGULE: 
  __retres = VIRGULE_ATTENDUE;
  /*sid:305*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:306*/
  case MOINS: 
  __retres = MOINS_ATTENDU;
  /*sid:306*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:307*/
  case DEUX_POINTS: 
  __retres = DEUXPOINTS_ATTENDU;
  /*sid:307*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:308*/
  case PAR_OUV: 
  __retres = PAROUV_ATTENDUE;
  /*sid:308*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:309*/
  case PAR_FERM: 
  __retres = PARFERM_ATTENDUE;
  /*sid:309*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:310*/
  case ACCOL_FERM: 
  __retres = ACCOLFERM_ATTENDUE;
  /*sid:310*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:311*/
  case CROCH_FERM: 
  __retres = CROCHFERM_ATTENDU;
  /*sid:311*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:312*/
  case ENDLEX: 
  __retres = NOERR;
  /*sid:312*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  /*sid:313*/
  case ERRLEX: 
  __retres = NOERR;
  /*sid:313*/
  /*T(__retres) = G(n)*/
  
  goto return_label;
  default: ;
  printf((char const   *)"Oups! Internal error in CodeDeLexAttendu\n");
  /*sid:316*/
  exit(1);
  /*sid:316*/
  /*T(__retres) = G(n)*/
  }
  
  /*sid:297*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(CodeDeLexAttendu) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(n) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(n) = G(n)*/
  /*T(global) = G(global)*/
  
  /*sid:1475*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1475*/
  /*T(CodeDeLexAttendu) = G(n)*/
  }

}
static int RecInstruction(LigneLog *L ) ;
static int RecDirective(LigneLog *L ) ;
static int RecProg(Elem *P , int *nbl ) ;
static int RecLigne(Elem *P , int *nligne ) ;
static char *RecParamChaine(void) ;
static char *RecParamEtiq(void) ;
static int RecParamInst(ParamInst *pa ) ;
static int RecExp(ParamExp *pe ) ;
static int RecIndexExp(ParamInst *pa ) ;
static int RecEtiqImm(ExpImmEtiq *tabexp , int no ) ;
static int RecShiftExp(ParamInstShift *ps ) ;
static Lexeme RecLex(NomLexeme n ) ;
static long RecParamIntBounded(int bound ) ;
static int RecParamReserv(int size , LigneLog *L ) ;
static int RecParamIntAlign(void) ;
int Analyse(FILE *fpin , Elem *LeProg_0 , int *p_nbLigneLog ) 
{ int result ;
  
  {/*sid:317*/
  DemLex(fpin);
  /*sid:317*/
  /*T(Analyse) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(fpin) + G(p_nbLigneLog) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  /*T(fpin) = G(fpin)*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(p_nbLigneLog) = G(p_nbLigneLog)*/
  /*T(result) = U*/
  
  result = RecProg(LeProg_0, p_nbLigneLog);
  if (result == 0) {printf((char const   *)"Syntaxe correcte\n");}
  
  /*sid:323*/
  return (result);
  /*sid:323*/
  /*T(Analyse) = U*/
  }

}
static Lexeme RecLex(NomLexeme n ) 
{ Lexeme r ;
  Lexeme tmp ;
  CodeErreur tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme __retres ;
  
  {/*sid:324*/
  {tmp_1 = LexCour();
   }
  /*sid:324*/
  /*T(RecLex) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(n) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  /*T(n) = G(n)*/
  /*T(r) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  
  if ((int )tmp_1.nat != (int )n)
  {{/*sid:329*/
    tmp = LexCour();
    /*sid:329*/
    /*T(tmp) = G(n)*/
    
    /*sid:330*/
    tmp_0 = CodeDeLexAttendu(n);
    /*sid:330*/
    /*T(tmp_0) = G(n)*/
    }
  /*sid:331*/
  ErreurSynt(tmp_0, tmp);
  /*sid:331*/
  /*T(LeProg) = G(n)*/
  /*T(nbLigneLog) = G(n)*/
  /*T(lesTaillesDeSections) = G(n)*/
  /*T(TheCharTable) = G(n)*/
  /*T(TheSymbolTable) = G(n)*/
  /*T(global) = G(n)*/
  }
  else {/*sid:332*/
  r = LexCour();
  /*sid:332*/
  /*T(r) = G(n)*/
  
  AvLex();
  /*sid:334*/
  __retres = r;
  /*sid:334*/
  /*T(__retres) = G(n)*/
  
  /*sid:1476*/
  goto return_label;
  /*sid:1476*/
  /*T(LeProg) = G(LeProg) + G(n)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(n)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(n)*/
  /*T(TheCharTable) = G(TheCharTable) + G(n)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(n)*/
  /*T(global) = G(global) + G(n)*/
  /*T(tmp) = G(n)*/
  /*T(tmp_0) = G(n)*/
  }
  
  /*sid:1477*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1477*/
  /*T(RecLex) = G(n)*/
  /*T(LeProg) = G(LeProg) + G(n)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(n)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(n)*/
  /*T(TheCharTable) = G(TheCharTable) + G(n)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(n)*/
  /*T(__retres) = G(n)*/
  /*T(global) = G(global) + G(n)*/
  /*T(r) = G(n)*/
  }

}
static int RecProg(Elem *P , int *nbl ) 
{ int nligne ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  int __retres ;
  
  {/*sid:335*/
  nligne = 0;
  /*sid:335*/
  /*T(nbl) = G(nbl)*/
  /*T(nligne) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(RecProg) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(P) + G(nbl) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  /*T(P) = G(P)*/
  
  while (1) {{tmp_1 = LexCour();
              }
    if (! ((int )tmp_1.nat != (int )ENDLEX)) {break;}
    
    while (1) {{tmp = LexCour();
                }
      if (! ((int )tmp.nat == (int )NL)) {break;}
      
      AvLex();}
    
    {tmp_0 = LexCour();
     }
    if ((int )tmp_0.nat != (int )ENDLEX) {RecLigne(P, & nligne);
      RecLex(NL);}
    }
  
  *nbl = nligne;
  __retres = 0;
  /*sid:1478*/
  return (__retres);
  /*sid:1478*/
  /*T(RecProg) = U*/
  }

}
static int RecLigne(Elem *P , int *nligne ) 
{ Lexeme lelex ;
  Elem *e ;
  LigneLog *L ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  int __retres ;
  
  {/*sid:359*/
  e = P + *nligne;
  /*sid:359*/
  /*T(P) = G(P)*/
  /*T(nligne) = G(nligne)*/
  /*T(lelex) = U*/
  /*T(e) = G(P) + G(nligne)*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(RecLigne) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(P) + G(nligne) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  /*sid:361*/
  L = & e->ligne;
  /*sid:361*/
  /*T(L) = G(P) + G(nligne)*/
  
  tmp = LexCour();
  switch ((int )tmp.nat) {case ERRLEX: 
  tmp_0 = LexCour();
  ErreurSynt(ERR_LEX, tmp_0);
  case ENDLEX: 
  __retres = 0;
  goto return_label;
  case NL: 
  break;
  case NOM_REG: 
  case INTEGER: 
  case CHAINE: 
  case VIRGULE: 
  case POINT_EXCL: 
  case DIESE: 
  case MOINS: 
  case PLUS: 
  case EGAL: 
  case PAR_OUV: 
  case PAR_FERM: 
  case ACCOL_OUV: 
  case ACCOL_FERM: 
  case CROCH_OUV: 
  case CROCH_FERM: 
  case DEUX_POINTS: 
  tmp_1 = LexCour();
  ErreurSynt(DEB_LIGNE, tmp_1);
  case ETIQUETTE: 
  tmp_2 = LexCour();
  e->nl_source = tmp_2.nol;
  L->nat = LL_ETIQ;
  lelex = LexCour();
  L->u.nom_etiq = lelex.chaine;
  AvLex();
  RecLex(DEUX_POINTS);
  (*nligne) ++;
  RecLigne(P, nligne);
  break;
  case DIRECTIVE: 
  tmp_3 = LexCour();
  e->nl_source = tmp_3.nol;
  RecDirective(L);
  (*nligne) ++;
  break;
  case INSTRUCTION: 
  tmp_4 = LexCour();
  e->nl_source = tmp_4.nol;
  RecInstruction(L);
  (*nligne) ++;
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in RecLigne\n");
  exit(1);}
  
  __retres = 0;
  /*sid:1480*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1480*/
  /*T(RecLigne) = U*/
  }

}
static int RecDirective(LigneLog *L ) 
{ int result ;
  Lexeme laDir ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  Lexeme tmp_5 ;
  Lexeme tmp_6 ;
  Lexeme tmp_7 ;
  int tmp_8 ;
  int tmp_9 ;
  int tmp_10 ;
  int tmp_11 ;
  int tmp_12 ;
  int tmp_13 ;
  int tmp_14 ;
  int tmp_15 ;
  int tmp_16 ;
  int tmp_17 ;
  int tmp_18 ;
  int tmp_19 ;
  
  {/*sid:394*/
  result = 0;
  /*sid:394*/
  /*T(L) = G(L)*/
  /*T(result) = U*/
  /*T(laDir) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(tmp_8) = U*/
  /*T(tmp_9) = U*/
  /*T(tmp_10) = U*/
  /*T(tmp_11) = U*/
  /*T(tmp_12) = U*/
  /*T(tmp_13) = U*/
  /*T(tmp_14) = U*/
  /*T(tmp_15) = U*/
  /*T(tmp_16) = U*/
  /*T(tmp_17) = U*/
  /*T(tmp_18) = U*/
  /*T(tmp_19) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(RecDirective) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(L) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  laDir = LexCour();
  AvLex();
  tmp_19 = strcmp(laDir.chaine, ".align");
  if (tmp_19)
  {tmp_18 = strcmp(laDir.chaine, ".text");
  if (tmp_18)
  {tmp_17 = strcmp(laDir.chaine, ".data");
  if (tmp_17)
  {tmp_16 = strcmp(laDir.chaine, ".bss");
  if (tmp_16)
  {tmp_15 = strcmp(laDir.chaine, ".word");
  if (tmp_15)
  {tmp_14 = strcmp(laDir.chaine, ".hword");
  if (tmp_14)
  {tmp_13 = strcmp(laDir.chaine, ".byte");
  if (tmp_13)
  {tmp_12 = strcmp(laDir.chaine, ".asciz");
  if (tmp_12)
  {tmp_11 = strcmp(laDir.chaine, ".ascii");
  if (tmp_11)
  {tmp_10 = strcmp(laDir.chaine, ".skip");
  if (tmp_10)
  {tmp_9 = strcmp(laDir.chaine, ".global");
  if (tmp_9)
  {tmp_8 = strcmp(laDir.chaine, ".set");
  if (tmp_8)
  {tmp_7 = LexCour();
  /*sid:422*/
  ErreurSynt(DIRECTIVE_INCONNUE, tmp_7);
  /*sid:422*/
  /*T(LeProg) = U*/
  /*T(nbLigneLog) = U*/
  /*T(lesTaillesDeSections) = U*/
  /*T(TheCharTable) = U*/
  /*T(TheSymbolTable) = U*/
  /*T(global) = U*/
  }
  else {L->nat = LL_CTE;
  tmp_5 = RecLex(ETIQUETTE);
  L->u.cte.etiq = tmp_5.chaine;
  RecLex(VIRGULE);
  tmp_6 = RecLex(INTEGER);
  L->u.cte.valcte = tmp_6.value;}
  }
  else {L->nat = LL_EXPORT;
  L->u.nom_globl = RecParamEtiq();}
  }
  else {L->nat = LL_RESERV_N_INIT;
  {tmp_4 = LexCour();
   }
  if ((int )tmp_4.nat == (int )INTEGER)
  {L->u.urni.dir = R_INT;
  tmp_0 = LexCour();
  L->u.urni.nboctets = tmp_0.value;
  AvLex();}
  else {{tmp_3 = LexCour();
         }
  if ((int )tmp_3.nat == (int )ETIQUETTE)
  {L->u.urni.dir = R_ETIQ;
  tmp_1 = LexCour();
  L->u.urni.etiq = tmp_1.chaine;
  AvLex();}
  else {tmp_2 = LexCour();
  /*sid:449*/
  ErreurSynt(INT_OU_ETIQ_ATTENDU, tmp_2);
  /*sid:449*/
  /*T(LeProg) = U*/
  /*T(nbLigneLog) = U*/
  /*T(lesTaillesDeSections) = U*/
  /*T(TheCharTable) = U*/
  /*T(TheSymbolTable) = U*/
  /*T(global) = U*/
  }
  }
  }
  }
  else {L->nat = LL_RESERV_INIT;
  L->u.uri.dir = R_ASCII;
  L->u.uri.p0.nat = PR_CHAINE;
  L->u.uri.p0.chaine = RecParamChaine();}
  }
  else {L->nat = LL_RESERV_INIT;
  L->u.uri.dir = R_ASCIZ;
  L->u.uri.p0.nat = PR_CHAINE;
  L->u.uri.p0.chaine = RecParamChaine();}
  }
  else {L->nat = LL_RESERV_INIT;
  L->u.uri.dir = R_BYTE;
  RecParamReserv(8, L);}
  }
  else {L->nat = LL_RESERV_INIT;
  L->u.uri.dir = R_HALF;
  RecParamReserv(16, L);}
  }
  else {L->nat = LL_RESERV_INIT;
  L->u.uri.dir = R_WORD;
  RecParamReserv(32, L);}
  }
  else {L->nat = LL_SECT;
  L->u.sect = Z_BSS;}
  }
  else {L->nat = LL_SECT;
  L->u.sect = Z_DATA;}
  }
  else {L->nat = LL_SECT;
  L->u.sect = Z_TEXT;}
  }
  else {L->nat = LL_ALIGN;
  L->u.align = (unsigned int )RecParamIntAlign();}
  
  /*sid:475*/
  return (result);
  /*sid:475*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(RecDirective) = U*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  }

}
static char *RecParamChaine(void) 
{ char *result ;
  Lexeme tmp ;
  int tmp_0 ;
  char *__retres ;
  
  {/*sid:476*/
  tmp = RecLex(CHAINE);
  /*sid:476*/
  /*T(result) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(RecParamChaine) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  result = tmp.chaine;
  {tmp_0 = strlen(result);
   *(result + (tmp_0 - 1)) = (char )'\000';}
  __retres = result + 1;
  /*sid:1481*/
  return (__retres);
  /*sid:1481*/
  /*T(RecParamChaine) = U*/
  }

}
static char *RecParamEtiq(void) 
{ Lexeme tmp ;
  char *__retres ;
  
  {/*sid:482*/
  tmp = RecLex(ETIQUETTE);
  /*sid:482*/
  /*T(tmp) = U*/
  /*T(RecParamEtiq) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  __retres = tmp.chaine;
  /*sid:1482*/
  return (__retres);
  /*sid:1482*/
  /*T(RecParamEtiq) = U*/
  }

}
static int RecParamInt(void) 
{ Lexeme tmp ;
  int __retres ;
  
  {/*sid:484*/
  tmp = RecLex(INTEGER);
  /*sid:484*/
  /*T(tmp) = U*/
  /*T(RecParamInt) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  __retres = tmp.value;
  /*sid:1483*/
  return (__retres);
  /*sid:1483*/
  /*T(RecParamInt) = U*/
  }

}
static int RecParamReserv(int size , LigneLog *L ) 
{ Lexeme tmp ;
  Lexeme tmp_0 ;
  long tmp_1 ;
  Lexeme tmp_2 ;
  int __retres ;
  
  {/*sid:486*/
  tmp = LexCour();
  /*sid:486*/
  /*T(size) = G(size)*/
  /*T(L) = G(L)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(RecParamReserv) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(size) + G(L) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  switch ((int )tmp.nat) {case ETIQUETTE: 
  L->u.uri.p0.nat = PR_ETIQUETTE;
  tmp_0 = RecLex(ETIQUETTE);
  L->u.uri.p0.nom_etiq = tmp_0.chaine;
  break;
  case INTEGER: 
  L->u.uri.p0.nat = PR_NOMBRE;
  L->u.uri.p0.nb = RecParamIntBounded(size);
  break;
  case MOINS: 
  L->u.uri.p0.nat = PR_NOMBRE;
  AvLex();
  {tmp_1 = RecParamIntBounded(size);
   L->u.uri.p0.nb = -1L * tmp_1;}
  break;
  default: ;
  tmp_2 = LexCour();
  ErreurSynt(INT_OU_ETIQ_ATTENDU, tmp_2);}
  
  __retres = 0;
  /*sid:1484*/
  return (__retres);
  /*sid:1484*/
  /*T(RecParamReserv) = U*/
  }

}
static long RecParamIntBounded(int bound ) 
{ long val ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  long __retres ;
  
  {/*sid:505*/
  {tmp_1 = LexCour();
   }
  /*sid:505*/
  /*T(bound) = G(bound)*/
  /*T(val) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(RecParamIntBounded) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(bound) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  if ((int )tmp_1.nat != (int )INTEGER)
  {tmp = LexCour();
  /*sid:510*/
  ErreurSynt(INT_ATTENDU, tmp);
  /*sid:510*/
  /*T(LeProg) = U*/
  /*T(nbLigneLog) = U*/
  /*T(lesTaillesDeSections) = U*/
  /*T(TheCharTable) = U*/
  /*T(TheSymbolTable) = U*/
  /*T(global) = U*/
  }
  else {tmp_0 = LexCour();
  val = (long )tmp_0.value;
  AvLex();
  __retres = val;
  goto return_label;}
  
  /*sid:515*/
  __retres = 0L;
  /*sid:515*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:1486*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1486*/
  /*T(RecParamIntBounded) = U*/
  }

}
static int RecParamIntAlign(void) 
{ Lexeme L ;
  Lexeme tmp_0 ;
  int __retres ;
  
  {/*sid:516*/
  L = RecLex(INTEGER);
  /*sid:516*/
  /*T(L) = U*/
  /*T(tmp_0) = U*/
  /*T(RecParamIntAlign) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  if (L.value != 1)
  {if (L.value != 2)
   {if (L.value != 4)
    {if (L.value != 8)
     {tmp_0 = LexCour();
     /*sid:526*/
     ErreurSynt(INT_ALIGN_ATTENDU, tmp_0);
     /*sid:526*/
     /*T(LeProg) = U*/
     /*T(nbLigneLog) = U*/
     /*T(lesTaillesDeSections) = U*/
     /*T(TheCharTable) = U*/
     /*T(TheSymbolTable) = U*/
     /*T(global) = U*/
     }
     else {__retres = L.value;
     goto return_label;}
    }
    else {__retres = L.value;
    goto return_label;}
   }
   else {__retres = L.value;
   goto return_label;}
  }
  else {__retres = L.value;
  goto return_label;}
  
  /*sid:531*/
  __retres = 0;
  /*sid:531*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:1491*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1491*/
  /*T(RecParamIntAlign) = U*/
  }

}
static int RecInstruction(LigneLog *L ) 
{ int i ;
  Lexeme Linst ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  Lexeme tmp_5 ;
  Lexeme tmp_6 ;
  Lexeme tmp_7 ;
  int __retres ;
  
  {/*sid:532*/
  i = 0;
  /*sid:532*/
  /*T(L) = G(L)*/
  /*T(i) = U*/
  /*T(Linst) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(RecInstruction) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(L) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  Linst = LexCour();
  L->nat = LL_INST;
  tmp_0 = LexCour();
  L->u.uinst.mnemo = tmp_0.chaine;
  tmp_1 = LexCour();
  L->u.uinst.s_i = tmp_1.s_i;
  AvLex();
  {tmp_7 = LexCour();
   }
  if ((int )tmp_7.nat == (int )NL)
  {tmp_2 = LexCour();
  /*sid:545*/
  ErreurSynt(ZERO_PARAM_INST, tmp_2);
  /*sid:545*/
  /*T(LeProg) = U*/
  /*T(nbLigneLog) = U*/
  /*T(lesTaillesDeSections) = U*/
  /*T(TheCharTable) = U*/
  /*T(TheSymbolTable) = U*/
  /*T(global) = U*/
  }
  else {RecParamInst(& L->u.uinst.p[0]);
  i = 1;
  {tmp_3 = LexCour();
   }
  if ((int )tmp_3.nat != (int )NL) {RecLex(VIRGULE);
    RecParamInst(& L->u.uinst.p[1]);
    i ++;}
  
  {tmp_4 = LexCour();
   }
  if ((int )tmp_4.nat != (int )NL) {RecLex(VIRGULE);
    RecParamInst(& L->u.uinst.p[2]);
    i ++;}
  
  {tmp_5 = LexCour();
   }
  if ((int )tmp_5.nat != (int )NL) {RecLex(VIRGULE);
    RecParamInst(& L->u.uinst.p[3]);
    i ++;}
  
  L->u.uinst.nbp = i;
  if (i > 4) {tmp_6 = LexCour();
    ErreurSynt(TROP_PARAM_INST, tmp_6);}
  }
  
  /*sid:578*/
  __retres = 0;
  /*sid:578*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:1492*/
  return (__retres);
  /*sid:1492*/
  /*T(RecInstruction) = U*/
  }

}
static int RecParamInst(ParamInst *pa ) 
{ Lexeme lelexeme ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  Lexeme tmp_5 ;
  int __retres ;
  
  {/*sid:579*/
  tmp = LexCour();
  /*sid:579*/
  /*T(pa) = G(pa)*/
  /*T(lelexeme) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(RecParamInst) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(pa) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  switch ((int )tmp.nat) {case DIESE: 
  pa->nat = P_EXP;
  AvLex();
  RecExp(& pa->u.exp);
  break;
  case ETIQUETTE: 
  pa->nat = P_EXP;
  pa->u.exp.nat = P_ETIQUETTE;
  tmp_0 = LexCour();
  pa->u.exp.nom_etiq = tmp_0.chaine;
  AvLex();
  break;
  case NOM_REG: 
  pa->nat = P_NOMREG;
  tmp_1 = LexCour();
  pa->u.noreg = tmp_1.noreg;
  AvLex();
  {tmp_2 = LexCour();
   }
  if ((int )tmp_2.nat == (int )POINT_EXCL) {pa->nat = P_NOMREG_EXCL;
    AvLex();}
  
  break;
  case DIRECTIVE: 
  pa->nat = P_SHIFT;
  RecShiftExp(& pa->u.exp_shift);
  break;
  case CROCH_OUV: 
  pa->nat = P_INDIR;
  AvLex();
  lelexeme = RecLex(NOM_REG);
  pa->u.indir.nbelt = 1;
  pa->u.indir.noreg1 = lelexeme.noreg;
  {tmp_3 = LexCour();
   }
  if ((int )tmp_3.nat == (int )VIRGULE) {AvLex();
    pa->u.indir.nbelt = 2;
    RecIndexExp(pa);}
  
  RecLex(CROCH_FERM);
  break;
  case ACCOL_OUV: 
  pa->nat = P_REGS;
  AvLex();
  lelexeme = RecLex(NOM_REG);
  pa->u.regs[lelexeme.noreg] = 1;
  while (1) {{tmp_4 = LexCour();
              }
    if (! ((int )tmp_4.nat == (int )VIRGULE)) {break;}
    
    AvLex();
    lelexeme = RecLex(NOM_REG);
    pa->u.regs[lelexeme.noreg] = 1;}
  
  RecLex(ACCOL_FERM);
  break;
  default: ;
  tmp_5 = LexCour();
  ErreurSynt(DEB_PARAM_INST, tmp_5);}
  
  __retres = 0;
  /*sid:1493*/
  return (__retres);
  /*sid:1493*/
  /*T(RecParamInst) = U*/
  }

}
static int RecExp(ParamExp *pe ) 
{ int nbe ;
  int val ;
  Lexeme lelex ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  Lexeme tmp_5 ;
  Lexeme tmp_6 ;
  Lexeme tmp_7 ;
  Lexeme tmp_8 ;
  int __retres ;
  
  {/*sid:641*/
  lelex = LexCour();
  /*sid:641*/
  /*T(pe) = G(pe)*/
  /*T(nbe) = U*/
  /*T(val) = U*/
  /*T(lelex) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(tmp_8) = U*/
  /*T(RecExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(pe) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  switch ((int )lelex.nat) {case INTEGER: 
  pe->nat = P_IMMEDIAT;
  tmp = RecLex(INTEGER);
  val = tmp.value;
  pe->valimm = (long )val;
  pe->tabexp[0].valimm = (long )val;
  break;
  case ETIQUETTE: 
  pe->nat = P_ETIQUETTE;
  tmp_0 = LexCour();
  pe->nom_etiq = tmp_0.chaine;
  break;
  case PLUS: 
  case MOINS: ;
  if ((int )lelex.nat == (int )PLUS) {pe->signe = S_PLUS;}
  else {pe->signe = S_MOINS;}
  
  AvLex();
  {tmp_5 = LexCour();
   }
  if ((int )tmp_5.nat == (int )INTEGER)
  {pe->nat = P_IMMEDIAT;
  tmp_1 = RecLex(INTEGER);
  val = tmp_1.value;
  if ((int )lelex.nat == (int )PLUS)
  {pe->valimm = (long )val;
  pe->tabexp[0].valimm = (long )val;}
  else {pe->valimm = (long )(-1 * val);
  pe->tabexp[0].valimm = (long )(-1 * val);}
  }
  else {{tmp_4 = LexCour();
         }
  if ((int )tmp_4.nat == (int )ETIQUETTE)
  {pe->nat = P_ETIQUETTE;
  tmp_2 = LexCour();
  pe->nom_etiq = tmp_2.chaine;}
  else {tmp_3 = LexCour();
  ErreurSynt(INT_OU_ETIQ_ATTENDU, tmp_3);}
  }
  
  break;
  case PAR_OUV: 
  pe->nat = P_EXP;
  AvLex();
  nbe = 0;
  RecEtiqImm(pe->tabexp, nbe);
  nbe ++;
  pe->nbexp = nbe;
  while (1) {{tmp_7 = LexCour();
              }
    if (! ((int )tmp_7.nat == (int )MOINS)) {break;}
    
    AvLex();
    if (nbe <= 5) {RecEtiqImm(pe->tabexp, nbe);
    nbe ++;
    pe->nbexp = nbe;}
    else {tmp_6 = LexCour();
    ErreurSynt(TROP_EXP, tmp_6);}
    }
  
  RecLex(PAR_FERM);
  break;
  default: ;
  tmp_8 = LexCour();
  ErreurSynt(DEB_EXPRESSION, tmp_8);}
  
  __retres = 0;
  /*sid:1494*/
  return (__retres);
  /*sid:1494*/
  /*T(RecExp) = U*/
  }

}
static int RecIndexExp(ParamInst *pa ) 
{ Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  Lexeme tmp_3 ;
  Lexeme tmp_4 ;
  Lexeme tmp_5 ;
  Lexeme tmp_6 ;
  Lexeme tmp_7 ;
  Lexeme tmp_8 ;
  Lexeme tmp_9 ;
  Lexeme tmp_10 ;
  Lexeme tmp_11 ;
  int __retres ;
  
  {/*sid:708*/
  {tmp_11 = LexCour();
   }
  /*sid:708*/
  /*T(pa) = G(pa)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(tmp_8) = U*/
  /*T(tmp_9) = U*/
  /*T(tmp_10) = U*/
  /*T(tmp_11) = U*/
  /*T(RecIndexExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(pa) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  if ((int )tmp_11.nat == (int )DIESE)
  {pa->u.indir.nat = IND_EXP;
  AvLex();
  RecExp(& pa->u.indir.exp);}
  else {{tmp_8 = LexCour();
         }
  if ((int )tmp_8.nat == (int )NOM_REG) {goto _L;}
  else {{tmp_9 = LexCour();
         }
  if ((int )tmp_9.nat == (int )PLUS) {goto _L;}
  else {{tmp_10 = LexCour();
         }
  if ((int )tmp_10.nat == (int )MOINS)
  {_L: /* CIL Label */ 
  tmp = LexCour();
  switch ((int )tmp.nat) {/*sid:731*/
  {case PLUS: 
   case MOINS: 
   tmp_0 = LexCour();
   }
  /*sid:731*/
  /*T(pa) = G(pa)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(tmp_8) = U*/
  /*T(tmp_9) = U*/
  /*T(tmp_10) = U*/
  /*T(tmp_11) = U*/
  /*T(RecIndexExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(pa) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  if ((int )tmp_0.nat == (int )PLUS) {pa->u.indir.signe = S_PLUS;}
  
  {tmp_1 = LexCour();
   }
  if ((int )tmp_1.nat == (int )MOINS) {pa->u.indir.signe = S_MOINS;}
  
  AvLex();
  {tmp_4 = LexCour();
   }
  if ((int )tmp_4.nat == (int )NOM_REG)
  {pa->u.indir.nat = IND_NOMREG;
  tmp_2 = LexCour();
  pa->u.indir.noreg2 = tmp_2.noreg;
  AvLex();}
  else {tmp_3 = LexCour();
  ErreurSynt(NOM_REG_ATTENDU, tmp_3);}
  
  break;
  case NOM_REG: 
  pa->u.indir.nat = IND_NOMREG;
  pa->u.indir.signe = S_PLUS;
  tmp_5 = LexCour();
  pa->u.indir.noreg2 = tmp_5.noreg;
  AvLex();
  break;
  default: ;
  printf((char const   *)"Oups! Internal error in RecIndexExp\n");
  exit(1);}
  
  {tmp_6 = LexCour();
   }
  if ((int )tmp_6.nat == (int )VIRGULE) {AvLex();
    pa->u.indir.nat = IND_NOMREG_SHIFT;
    RecShiftExp(& pa->u.indir.exp_shift);}
  }
  else {tmp_7 = LexCour();
  ErreurSynt(DIESE_PLUS_MOINS_REG, tmp_7);}
  }
  }
  }
  
  __retres = 0;
  /*sid:1495*/
  return (__retres);
  /*sid:1495*/
  /*T(RecIndexExp) = U*/
  }

}
static int RecShiftExp(ParamInstShift *ps ) 
{ Lexeme ladir ;
  Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  int tmp_3 ;
  int tmp_4 ;
  int tmp_5 ;
  int tmp_6 ;
  int tmp_7 ;
  int __retres ;
  
  {/*sid:775*/
  ladir = LexCour();
  /*sid:775*/
  /*T(ps) = G(ps)*/
  /*T(ladir) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(RecShiftExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(ps) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  if ((int )ladir.nat == (int )DIRECTIVE)
  {tmp_4 = strcmp(ladir.chaine, "LSL");
  if (tmp_4)
  {tmp_5 = strcmp(ladir.chaine, "LSR");
  if (tmp_5)
  {tmp_6 = strcmp(ladir.chaine, "ASR");
  if (tmp_6)
  {tmp_7 = strcmp(ladir.chaine, "ROR");
  if (tmp_7) {goto _L;}
  else {_L_0: /* CIL Label */ 
  ps->dir_shift = ladir.chaine;
  AvLex();
  {tmp_1 = LexCour();
   }
  if ((int )tmp_1.nat == (int )DIESE)
  {AvLex();
  ps->nat = P_IMMEDIAT;
  tmp = RecLex(INTEGER);
  ps->valimmshift = (long )tmp.value;}
  else {tmp_0 = RecLex(NOM_REG);
  ps->noregshift = tmp_0.noreg;
  ps->nat = P_NOMREG;}
  }
  }
  else {goto _L_0;}
  }
  else {goto _L_0;}
  }
  else {goto _L_0;}
  }
  else {_L: /* CIL Label */ ;
  if ((int )ladir.nat == (int )DIRECTIVE)
  {tmp_3 = strcmp(ladir.chaine, "RRX");
  if (tmp_3)
  {tmp_2 = LexCour();
  /*sid:808*/
  ErreurSynt(DIR_SHIFT_ATTENDUE, tmp_2);
  /*sid:808*/
  /*T(LeProg) = U*/
  /*T(nbLigneLog) = U*/
  /*T(lesTaillesDeSections) = U*/
  /*T(TheCharTable) = U*/
  /*T(TheSymbolTable) = U*/
  /*T(global) = U*/
  }
  else {ps->dir_shift = ladir.chaine;
  AvLex();}
  }
  else {tmp_2 = LexCour();
  ErreurSynt(DIR_SHIFT_ATTENDUE, tmp_2);}
  }
  
  /*sid:813*/
  __retres = 0;
  /*sid:813*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:1496*/
  return (__retres);
  /*sid:1496*/
  /*T(RecShiftExp) = U*/
  }

}
static int RecEtiqImm(ExpImmEtiq *tabexp , int no ) 
{ Lexeme tmp ;
  Lexeme tmp_0 ;
  Lexeme tmp_1 ;
  Lexeme tmp_2 ;
  int __retres ;
  
  {/*sid:814*/
  tmp = LexCour();
  /*sid:814*/
  /*T(tabexp) = G(tabexp)*/
  /*T(no) = G(no)*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(RecEtiqImm) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(tabexp) + G(no) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  switch ((int )tmp.nat) {/*sid:816*/
  case INTEGER: 
  (tabexp + no)->nat = P_IMMEDIAT;
  /*sid:816*/
  /*T(tabexp) = G(tabexp) + G(no)*/
  
  tmp_0 = LexCour();
  (tabexp + no)->valimm = (long )tmp_0.value;
  break;
  /*sid:820*/
  case ETIQUETTE: 
  (tabexp + no)->nat = P_ETIQUETTE;
  /*sid:820*/
  /*T(tabexp) = G(tabexp) + G(no)*/
  
  tmp_1 = LexCour();
  (tabexp + no)->nom_etiq = tmp_1.chaine;
  break;
  default: ;
  tmp_2 = LexCour();
  /*sid:826*/
  ErreurSynt(INT_OU_ETIQ_ATTENDU, tmp_2);
  /*sid:826*/
  /*T(tabexp) = G(tabexp) + G(no)*/
  }
  
  AvLex();
  __retres = 0;
  /*sid:1497*/
  return (__retres);
  /*sid:1497*/
  /*T(RecEtiqImm) = U*/
  }

}
static int VerifInst(Elem E ) ;
static int VerifReservInit(Elem E ) ;
int Verif(Elem *LeProg_0 , int nbLigneLog_0 ) 
{ int i ;
  int result ;
  Elem E ;
  LigneLog L ;
  int tmp ;
  int tmp_0 ;
  
  {/*sid:829*/
  result = 0;
  /*sid:829*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
  /*T(i) = U*/
  /*T(result) = U*/
  /*T(E) = U*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(Verif) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  i = 0;
  /*sid:831*/
  while (i < nbLigneLog_0) {E = *(LeProg_0 + i);
    L = E.ligne;
    switch ((int )L.nat) {case LL_NONE: 
    break;
    case LL_ETIQ: 
    break;
    /*sid:842*/
    {/*sid:843*/
     case LL_INST: 
     tmp = VerifInst(E);
     /*sid:843*/
     /*T(i) = G(nbLigneLog_0)*/
     /*T(result) = G(nbLigneLog_0)*/
     /*T(E) = G(LeProg_0) + G(nbLigneLog_0)*/
     /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
     /*T(tmp) = G(nbLigneLog_0)*/
     /*T(tmp_0) = G(nbLigneLog_0)*/
     
     result += tmp;}
    /*sid:842*/
    /*T(LeProg_0) = G(LeProg_0)*/
    /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
    /*T(i) = U*/
    /*T(result) = U*/
    /*T(E) = U*/
    /*T(L) = U*/
    /*T(tmp) = U*/
    /*T(tmp_0) = U*/
    /*T(LeProg) = G(LeProg)*/
    /*T(nbLigneLog) = G(nbLigneLog)*/
    /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
    /*T(TheCharTable) = G(TheCharTable)*/
    /*T(TheSymbolTable) = G(TheSymbolTable)*/
    /*T(Verif) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
    /*T(global) = G(global)*/
    
    break;
    case LL_EXPORT: 
    break;
    case LL_SECT: 
    break;
    case LL_RESERV_N_INIT: 
    break;
    /*sid:849*/
    {/*sid:850*/
     case LL_RESERV_INIT: 
     tmp_0 = VerifReservInit(E);
     /*sid:850*/
     /*T(i) = G(nbLigneLog_0)*/
     /*T(result) = G(nbLigneLog_0)*/
     /*T(E) = G(LeProg_0) + G(nbLigneLog_0)*/
     /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
     /*T(tmp) = G(nbLigneLog_0)*/
     /*T(tmp_0) = G(nbLigneLog_0)*/
     
     result += tmp_0;}
    /*sid:849*/
    /*T(LeProg_0) = G(LeProg_0)*/
    /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
    /*T(i) = U*/
    /*T(result) = U*/
    /*T(E) = U*/
    /*T(L) = U*/
    /*T(tmp) = U*/
    /*T(tmp_0) = U*/
    /*T(LeProg) = G(LeProg)*/
    /*T(nbLigneLog) = G(nbLigneLog)*/
    /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
    /*T(TheCharTable) = G(TheCharTable)*/
    /*T(TheSymbolTable) = G(TheSymbolTable)*/
    /*T(Verif) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
    /*T(global) = G(global)*/
    
    break;
    case LL_ALIGN: 
    break;}
    
    i ++;}
  
  /*sid:831*/
  /*T(i) = G(nbLigneLog_0)*/
  /*T(result) = G(nbLigneLog_0)*/
  /*T(E) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp) = G(nbLigneLog_0)*/
  /*T(tmp_0) = G(nbLigneLog_0)*/
  
  /*sid:855*/
  return (result);
  /*sid:855*/
  /*T(Verif) = G(nbLigneLog_0)*/
  }

}
static int VerifInst(Elem E ) 
{ int result ;
  LigneLog L ;
  char *mnemo ;
  
  {/*sid:856*/
  result = 0;
  /*sid:856*/
  /*T(E) = G(E)*/
  /*T(result) = U*/
  /*T(L) = U*/
  /*T(mnemo) = U*/
  /*T(VerifInst) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(E) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:858*/
  L = E.ligne;
  /*sid:858*/
  /*T(L) = G(E)*/
  
  /*sid:860*/
  mnemo = L.u.uinst.mnemo;
  /*sid:860*/
  /*T(mnemo) = G(E)*/
  
  /*sid:861*/
  return (result);
  /*sid:861*/
  /*T(VerifInst) = U*/
  }

}
static int VerifReservInit(Elem E ) 
{ int result ;
  LigneLog L ;
  
  {/*sid:862*/
  result = 0;
  /*sid:862*/
  /*T(E) = G(E)*/
  /*T(result) = U*/
  /*T(L) = U*/
  /*T(VerifReservInit) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(E) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:864*/
  L = E.ligne;
  /*sid:864*/
  /*T(L) = G(E)*/
  
  /*sid:865*/
  return (result);
  /*sid:865*/
  /*T(VerifReservInit) = U*/
  }

}
static taillesDeSections lesTaillesDeSections ;
static void CalculAdrEtZones(Elem *LeProg_0 , int nbLigneLog_0 ) ;
static void GenereTSetTC(Elem *LeProg_0 , int nbLigneLog_0 ) ;
void Decoration(Elem *LeProg_0 , int nbLigneLog_0 ) 
{ 
  
  {/*sid:866*/
  CalculAdrEtZones(LeProg_0, nbLigneLog_0);
  /*sid:866*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(Decoration) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:867*/
  GenereTSetTC(LeProg_0, nbLigneLog_0);
  /*sid:867*/
  /*T(lesTaillesDeSections) = G(TheSymbolTable) + G(LeProg_0) + G(TheCharTable) + G(nbLigneLog_0)*/
  /*T(TheCharTable) = G(TheSymbolTable) + G(nbLigneLog_0) + G(LeProg_0) + G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheCharTable) + G(LeProg_0) + G(nbLigneLog_0) + G(TheSymbolTable)*/
  
  /*sid:1498*/
  return;
  /*sid:1498*/
  /*T(Decoration) = U*/
  }

}
static void CalculAdrEtZones(Elem *LeProg_0 , int nbLigneLog_0 ) 
{ int i ;
  int cpt_zone[4] ;
  int nb_elem[4] ;
  int nb_elem_txt ;
  int nb_data ;
  NomZone zone_cour ;
  int lg_chaine ;
  Elem *pE ;
  LigneLog L ;
  unsigned int tmp ;
  
  {/*sid:869*/
  cpt_zone[0] = 0;
  /*sid:869*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
  /*T(i) = U*/
  /*T(cpt_zone) = U*/
  /*T(nb_elem) = U*/
  /*T(nb_elem_txt) = U*/
  /*T(nb_data) = U*/
  /*T(zone_cour) = U*/
  /*T(lg_chaine) = U*/
  /*T(pE) = U*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(CalculAdrEtZones) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  cpt_zone[1] = 0;
  cpt_zone[2] = 0;
  cpt_zone[3] = 0;
  nb_elem[0] = 0;
  nb_elem[1] = 0;
  nb_elem[2] = 0;
  nb_elem[3] = 0;
  nb_elem_txt = 0;
  nb_data = 0;
  zone_cour = Z_TEXT;
  i = 0;
  /*sid:881*/
  while (i < nbLigneLog_0) {pE = LeProg_0 + i;
    L = pE->ligne;
    pE->zone_cour = zone_cour;
    pE->ad_dans_zone = (long )cpt_zone[zone_cour];
    switch ((int )L.nat) {case LL_NONE: 
    break;
    case LL_ETIQ: 
    break;
    case LL_INST: 
    pE->nb_bits = 32L;
    cpt_zone[zone_cour] += 4;
    (nb_elem[zone_cour]) ++;
    break;
    case LL_EXPORT: 
    break;
    case LL_SECT: 
    zone_cour = L.u.sect;
    break;
    case LL_RESERV_N_INIT: 
    pE->nb_bits = (long )(L.u.urni.nboctets * 4);
    cpt_zone[zone_cour] += L.u.urni.nboctets;
    (nb_elem[zone_cour]) ++;
    break;
    case LL_RESERV_INIT: 
    (nb_elem[zone_cour]) ++;
    switch ((int )L.u.uri.dir) {case R_WORD: 
    pE->nb_bits = 32L;
    cpt_zone[zone_cour] += 4;
    break;
    case R_HALF: 
    pE->nb_bits = 16L;
    cpt_zone[zone_cour] += 2;
    break;
    case R_BYTE: 
    pE->nb_bits = 8L;
    (cpt_zone[zone_cour]) ++;
    break;
    case R_ASCIZ: 
    lg_chaine = strlen(L.u.uri.p0.chaine);
    pE->nb_bits = (long )((lg_chaine + 1) * 8);
    cpt_zone[zone_cour] += lg_chaine + 1;
    break;}
    
    break;
    case LL_ALIGN: 
    (nb_elem[zone_cour]) ++;
    {if ((unsigned int )cpt_zone[zone_cour] % L.u.align)
     {tmp = L.u.align - (unsigned int )cpt_zone[zone_cour] % L.u.align;}
     else {tmp = 0U;}
     
     
     pE->nb_bits = (long )(8U * tmp);}
    cpt_zone[zone_cour] = (int )((long )cpt_zone[zone_cour] + pE->nb_bits / 8L);
    break;}
    
    i ++;}
  
  /*sid:881*/
  /*T(i) = G(nbLigneLog_0)*/
  /*T(cpt_zone) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(nb_elem) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(zone_cour) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(lg_chaine) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(pE) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp) = G(LeProg_0) + G(nbLigneLog_0)*/
  
  /*sid:933*/
  lesTaillesDeSections.theTextZone_nelem = nb_elem[Z_TEXT];
  /*sid:933*/
  /*T(lesTaillesDeSections) = G(LeProg_0) + G(nbLigneLog_0)*/
  
  lesTaillesDeSections.theDataZone_nelem = nb_elem[Z_DATA];
  /*sid:1499*/
  return;
  /*sid:1499*/
  /*T(CalculAdrEtZones) = U*/
  }

}
static char TheCharTable[5000] ;
static Asymbol TheSymbolTable[1000] ;
static void InsererDansTS(int indice , NomZone zone , unsigned long value ,
                          unsigned long adr_TC , LocGlob portee ) 
{ 
  
  {/*sid:936*/
  TheSymbolTable[indice].Zone = zone;
  /*sid:936*/
  /*T(indice) = G(indice)*/
  /*T(zone) = G(zone)*/
  /*T(value) = G(value)*/
  /*T(adr_TC) = G(adr_TC)*/
  /*T(portee) = G(portee)*/
  /*T(InsererDansTS) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(adr_TC) + G(zone) + G(indice) + G(value) + G(portee) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(zone) + G(indice)*/
  /*T(global) = G(global)*/
  
  /*sid:937*/
  TheSymbolTable[indice].Value = value;
  /*sid:937*/
  /*T(TheSymbolTable) = G(value) + G(indice)*/
  
  /*sid:938*/
  TheSymbolTable[indice].AdressInCharTable = adr_TC;
  /*sid:938*/
  /*T(TheSymbolTable) = G(adr_TC) + G(indice)*/
  
  /*sid:939*/
  TheSymbolTable[indice].portee = portee;
  /*sid:939*/
  /*T(TheSymbolTable) = G(portee) + G(indice)*/
  
  /*sid:1500*/
  return;
  /*sid:1500*/
  /*T(InsererDansTS) = U*/
  }

}
static int ChercherDansTS(char *chaine , int nb_symb ) 
{ int i ;
  int tmp ;
  int __retres ;
  
  {/*sid:941*/
  i = 0;
  /*sid:941*/
  /*T(chaine) = G(chaine)*/
  /*T(nb_symb) = G(nb_symb)*/
  /*T(i) = U*/
  /*T(tmp) = U*/
  /*T(ChercherDansTS) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(chaine) + G(nb_symb) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  /*sid:942*/
  while (i < nb_symb) {tmp = strcmp(chaine,
                                    & TheCharTable[TheSymbolTable[i].AdressInCharTable]);
    if (! tmp) {/*sid:949*/
      __retres = i;
      /*sid:949*/
      /*T(__retres) = G(chaine) + G(TheCharTable) + G(TheSymbolTable) + G(nb_symb)*/
      
      goto return_label;}
    
    i ++;}
  
  /*sid:942*/
  /*T(i) = G(chaine) + G(TheCharTable) + G(TheSymbolTable) + G(nb_symb)*/
  /*T(tmp) = G(chaine) + G(TheCharTable) + G(TheSymbolTable) + G(nb_symb)*/
  /*T(TheCharTable) = G(nb_symb) + G(chaine) + G(TheSymbolTable) + G(TheCharTable)*/
  
  /*sid:951*/
  __retres = -1;
  /*sid:951*/
  /*T(__retres) = G(chaine) + G(TheCharTable) + G(TheSymbolTable) + G(nb_symb)*/
  
  /*sid:1502*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1502*/
  /*T(ChercherDansTS) = G(chaine) + G(TheCharTable) + G(TheSymbolTable) + G(nb_symb)*/
  }

}
static void InsererDansTC(int indice , char *chaine ) 
{ 
  
  {/*sid:952*/
  strcpy(& TheCharTable[indice], chaine);
  /*sid:952*/
  /*T(indice) = G(indice)*/
  /*T(chaine) = G(chaine)*/
  /*T(InsererDansTC) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(indice) + G(chaine) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(indice) + G(TheCharTable) + G(chaine)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  /*sid:1503*/
  return;
  /*sid:1503*/
  /*T(InsererDansTC) = U*/
  }

}
void DumpTS(void) 
{ int i ;
  char *nom_symb ;
  NomZone zone ;
  unsigned long value ;
  LocGlob portee ;
  unsigned long adr_TC ;
  char *tmp ;
  
  {/*sid:954*/
  printf((char const   *)"ZONE | val  | P | @TC| nom\n");
  /*sid:954*/
  /*T(i) = U*/
  /*T(nom_symb) = U*/
  /*T(zone) = U*/
  /*T(value) = U*/
  /*T(portee) = U*/
  /*T(adr_TC) = U*/
  /*T(tmp) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(DumpTS) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  i = 0;
  /*sid:956*/
  while (i < lesTaillesDeSections.theSymbolTable_nelem) {zone = TheSymbolTable[i].Zone;
    value = TheSymbolTable[i].Value;
    adr_TC = TheSymbolTable[i].AdressInCharTable;
    portee = TheSymbolTable[i].portee;
    nom_symb = & TheCharTable[adr_TC];
    tmp = NomZone2String(zone);
    /*sid:966*/
    printf((char const   *)"%s | %4d | %d | %2d | %s \n", tmp, value, portee,
           adr_TC, nom_symb);
    /*sid:966*/
    /*T(LeProg) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
    /*T(nbLigneLog) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
    /*T(TheCharTable) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
    /*T(global) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
    
    /*sid:967*/
    i ++;
    /*sid:967*/
    /*T(LeProg) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(LeProg)*/
    /*T(nbLigneLog) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(nbLigneLog)*/
    /*T(TheCharTable) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable)*/
    /*T(global) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(global)*/
    }
  
  /*sid:956*/
  /*T(i) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(nom_symb) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(zone) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(value) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(portee) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(adr_TC) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(tmp) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(LeProg) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(LeProg)*/
  /*T(nbLigneLog) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable)*/
  /*T(TheSymbolTable) = G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(global) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(global)*/
  
  /*sid:1504*/
  return;
  /*sid:1504*/
  /*T(DumpTS) = U*/
  }

}
static void GenereTSetTC(Elem *LeProg_0 , int nbLigneLog_0 ) 
{ int i ;
  int nb_symb ;
  unsigned long nb_char ;
  char *nom_symb ;
  NomZone zone ;
  unsigned long value ;
  LocGlob portee ;
  int ind_ds_TS ;
  ParamInst p ;
  ParamReserv pr ;
  Elem *pE ;
  LigneLog L ;
  int tmp ;
  int tmp_0 ;
  int tmp_1 ;
  int tmp_2 ;
  int tmp_3 ;
  int tmp_4 ;
  int tmp_5 ;
  
  {/*sid:969*/
  nb_symb = 0;
  /*sid:969*/
  /*T(LeProg_0) = G(LeProg_0)*/
  /*T(nbLigneLog_0) = G(nbLigneLog_0)*/
  /*T(i) = U*/
  /*T(nb_symb) = U*/
  /*T(nb_char) = U*/
  /*T(nom_symb) = U*/
  /*T(zone) = U*/
  /*T(value) = U*/
  /*T(portee) = U*/
  /*T(ind_ds_TS) = U*/
  /*T(p) = U*/
  /*T(pr) = U*/
  /*T(pE) = U*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(GenereTSetTC) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(LeProg_0) + G(nbLigneLog_0) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  nb_char = 0UL;
  i = 0;
  /*sid:972*/
  while (i < nbLigneLog_0) {pE = LeProg_0 + i;
    L = pE->ligne;
    switch ((int )L.nat) {case LL_NONE: 
    break;
    case LL_ETIQ: 
    nom_symb = L.u.nom_etiq;
    ind_ds_TS = ChercherDansTS(nom_symb, nb_symb);
    if (ind_ds_TS == -1)
    {zone = pE->zone_cour;
    value = (unsigned long )pE->ad_dans_zone;
    portee = Local;
    InsererDansTC((int )nb_char, nom_symb);
    InsererDansTS(nb_symb, zone, value, nb_char, portee);
    {tmp = strlen(nom_symb);
     nb_char += (unsigned long )(tmp + 1);}
    nb_symb ++;}
    else {if ((int )TheSymbolTable[ind_ds_TS].Zone == (int )Z_NONE)
          {zone = pE->zone_cour;
          value = (unsigned long )pE->ad_dans_zone;
          TheSymbolTable[ind_ds_TS].Value = value;
          TheSymbolTable[ind_ds_TS].Zone = zone;}
          else {printf((char const   *)"ON RALE  : double def");}
    }
    
    break;
    case LL_INST: 
    switch (L.u.uinst.nbp) {case 4: 
    p = L.u.uinst.p[3];
    if ((int )p.nat == (int )P_EXP) {if ((int )p.u.exp.nat == (int )P_ETIQUETTE) {
                                       nom_symb = p.u.exp.nom_etiq;
                                       ind_ds_TS = ChercherDansTS(nom_symb,
                                                                  nb_symb);
                                       if (ind_ds_TS == -1) {InsererDansTC(
                                                             (int )nb_char,
                                                             nom_symb);
                                         InsererDansTS(nb_symb, Z_NONE, 0UL,
                                                       nb_char, Local);
                                         {tmp_0 = strlen(nom_symb);
                                          nb_char += (unsigned long )(
                                          tmp_0 + 1);}
                                         nb_symb ++;}
                                       }
      }
    
    case 3: 
    p = L.u.uinst.p[2];
    if ((int )p.nat == (int )P_EXP) {if ((int )p.u.exp.nat == (int )P_ETIQUETTE) {
                                       nom_symb = p.u.exp.nom_etiq;
                                       ind_ds_TS = ChercherDansTS(nom_symb,
                                                                  nb_symb);
                                       if (ind_ds_TS == -1) {InsererDansTC(
                                                             (int )nb_char,
                                                             nom_symb);
                                         InsererDansTS(nb_symb, Z_NONE, 0UL,
                                                       nb_char, Local);
                                         {tmp_1 = strlen(nom_symb);
                                          nb_char += (unsigned long )(
                                          tmp_1 + 1);}
                                         nb_symb ++;}
                                       }
      }
    
    case 2: 
    p = L.u.uinst.p[1];
    if ((int )p.nat == (int )P_EXP) {if ((int )p.u.exp.nat == (int )P_ETIQUETTE) {
                                       nom_symb = p.u.exp.nom_etiq;
                                       ind_ds_TS = ChercherDansTS(nom_symb,
                                                                  nb_symb);
                                       if (ind_ds_TS == -1) {InsererDansTC(
                                                             (int )nb_char,
                                                             nom_symb);
                                         InsererDansTS(nb_symb, Z_NONE, 0UL,
                                                       nb_char, Local);
                                         {tmp_2 = strlen(nom_symb);
                                          nb_char += (unsigned long )(
                                          tmp_2 + 1);}
                                         nb_symb ++;}
                                       }
      }
    
    case 1: 
    p = L.u.uinst.p[0];
    if ((int )p.nat == (int )P_EXP) {if ((int )p.u.exp.nat == (int )P_ETIQUETTE) {
                                       nom_symb = p.u.exp.nom_etiq;
                                       ind_ds_TS = ChercherDansTS(nom_symb,
                                                                  nb_symb);
                                       if (ind_ds_TS == -1) {InsererDansTC(
                                                             (int )nb_char,
                                                             nom_symb);
                                         InsererDansTS(nb_symb, Z_NONE, 0UL,
                                                       nb_char, Local);
                                         {tmp_3 = strlen(nom_symb);
                                          nb_char += (unsigned long )(
                                          tmp_3 + 1);}
                                         nb_symb ++;}
                                       }
      }
    
    break;
    default: ;
    break;}
    
    break;
    case LL_EXPORT: 
    nom_symb = L.u.nom_globl;
    ind_ds_TS = ChercherDansTS(nom_symb, nb_symb);
    if (ind_ds_TS == -1)
    {InsererDansTC((int )nb_char, nom_symb);
    InsererDansTS(nb_symb, Z_NONE, 0UL, nb_char, Global);
    {tmp_4 = strlen(nom_symb);
     nb_char += (unsigned long )(tmp_4 + 1);}
    nb_symb ++;}
    else {TheSymbolTable[ind_ds_TS].portee = Global;}
    
    break;
    case LL_SECT: 
    break;
    case LL_RESERV_N_INIT: 
    break;
    case LL_RESERV_INIT: 
    pr = L.u.uri.p0;
    if ((int )pr.nat == (int )PR_ETIQUETTE) {nom_symb = pr.nom_etiq;
      ind_ds_TS = ChercherDansTS(nom_symb, nb_symb);
      if (ind_ds_TS == -1) {InsererDansTC((int )nb_char, nom_symb);
        InsererDansTS(nb_symb, Z_NONE, 0UL, nb_char, Local);
        {tmp_5 = strlen(nom_symb);
         nb_char += (unsigned long )(tmp_5 + 1);}
        nb_symb ++;}
      }
    
    break;
    case LL_ALIGN: 
    break;}
    
    i ++;}
  
  /*sid:972*/
  /*T(i) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(nb_symb) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(nb_char) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(nom_symb) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(zone) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(value) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(portee) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(ind_ds_TS) = G(TheSymbolTable) + G(TheCharTable) + G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(p) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(pr) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(pE) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(L) = G(LeProg_0) + G(nbLigneLog_0)*/
  /*T(tmp) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(tmp_0) = G(LeProg_0) + G(TheSymbolTable) + G(TheCharTable) + G(nbLigneLog_0)*/
  /*T(tmp_1) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(tmp_2) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(tmp_3) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(tmp_4) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  /*T(tmp_5) = G(LeProg_0) + G(TheSymbolTable) + G(TheCharTable) + G(nbLigneLog_0)*/
  /*T(TheCharTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheSymbolTable) + G(TheCharTable)*/
  /*T(TheSymbolTable) = G(nbLigneLog_0) + G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable)*/
  
  /*sid:1112*/
  i = 0;
  /*sid:1112*/
  /*T(i) = U*/
  
  /*sid:1113*/
  while (i < nb_symb) {if ((int )TheSymbolTable[i].Zone == (int )Z_NONE) {if
                          ((int )TheSymbolTable[i].portee == (int )Local) {
                         TheSymbolTable[i].portee = Global;}
                         }
    
    i ++;}
  
  /*sid:1113*/
  /*T(i) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  
  /*sid:1125*/
  lesTaillesDeSections.theCharTable_size = (int )nb_char;
  /*sid:1125*/
  /*T(lesTaillesDeSections) = G(LeProg_0) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog_0)*/
  
  lesTaillesDeSections.theSymbolTable_nelem = nb_symb;
  /*sid:1505*/
  return;
  /*sid:1505*/
  /*T(GenereTSetTC) = U*/
  }

}
static void EcrireTC(FILE *f ) 
{ int i ;
  
  {/*sid:1128*/
  fprintf((FILE *)f, (char const   *)"%d,%d\n",
          lesTaillesDeSections.theCharTable_size,
          lesTaillesDeSections.theSymbolTable_nelem);
  /*sid:1128*/
  /*T(f) = G(f)*/
  /*T(i) = U*/
  /*T(EcrireTC) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(f) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(lesTaillesDeSections)*/
  /*T(nbLigneLog) = G(lesTaillesDeSections)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(lesTaillesDeSections)*/
  /*T(TheSymbolTable) = G(lesTaillesDeSections)*/
  /*T(global) = G(lesTaillesDeSections)*/
  
  i = 0;
  /*sid:1130*/
  while (i < lesTaillesDeSections.theCharTable_size) {if ((int )TheCharTable[i] != '\000')
                                                      {fprintf((FILE *)f,
                                                               (char const   *)"%c",
                                                               TheCharTable[i]);}
                                                      else {fprintf((FILE *)f,
                                                                    (char const   *)"\n");}
    
    i ++;}
  
  /*sid:1130*/
  /*T(i) = G(lesTaillesDeSections)*/
  
  /*sid:1506*/
  return;
  /*sid:1506*/
  /*T(EcrireTC) = U*/
  }

}
static char *NomPortee2String(LocGlob portee ) 
{ char *__retres ;
  
  {/*sid:1140*/
  switch ((int )portee) {/*sid:1141*/
  case Local: 
  __retres = (char *)"N_EXT";
  /*sid:1141*/
  /*T(__retres) = G(portee)*/
  
  goto return_label;
  /*sid:1142*/
  case Global: 
  __retres = (char *)"EXT";
  /*sid:1142*/
  /*T(__retres) = G(portee)*/
  
  goto return_label;}
  
  /*sid:1140*/
  /*T(portee) = G(portee)*/
  /*T(NomPortee2String) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(portee) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(__retres) = U*/
  /*T(global) = G(global)*/
  
  /*sid:1143*/
  __retres = (char *)0;
  /*sid:1143*/
  /*T(__retres) = G(portee)*/
  
  /*sid:1509*/
  return_label: /* CIL Label */ 
  return (__retres);
  /*sid:1509*/
  /*T(NomPortee2String) = G(portee)*/
  }

}
static void EcrireTS(FILE *f ) 
{ int i ;
  NomZone zone ;
  unsigned long value ;
  LocGlob portee ;
  unsigned long adr_TC ;
  char *tmp ;
  char *tmp_0 ;
  
  {/*sid:1144*/
  fprintf((FILE *)f, (char const   *)"%d\n",
          lesTaillesDeSections.theSymbolTable_nelem);
  /*sid:1144*/
  /*T(f) = G(f)*/
  /*T(i) = U*/
  /*T(zone) = U*/
  /*T(value) = U*/
  /*T(portee) = U*/
  /*T(adr_TC) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(EcrireTS) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(f) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(lesTaillesDeSections)*/
  /*T(nbLigneLog) = G(lesTaillesDeSections)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(lesTaillesDeSections)*/
  /*T(TheSymbolTable) = G(lesTaillesDeSections)*/
  /*T(global) = G(lesTaillesDeSections)*/
  
  i = 0;
  /*sid:1146*/
  while (i < lesTaillesDeSections.theSymbolTable_nelem) {adr_TC = TheSymbolTable[i].AdressInCharTable;
    value = TheSymbolTable[i].Value;
    zone = TheSymbolTable[i].Zone;
    portee = TheSymbolTable[i].portee;
    {tmp = NomPortee2String(portee);
     tmp_0 = NomZone2String(zone);}
    fprintf((FILE *)f, (char const   *)"%d \t %d \t %d \t %s \t %s \n", i,
            adr_TC, value, tmp_0, tmp);
    i ++;}
  
  /*sid:1146*/
  /*T(i) = G(lesTaillesDeSections)*/
  /*T(zone) = G(lesTaillesDeSections)*/
  /*T(value) = G(lesTaillesDeSections)*/
  /*T(portee) = G(lesTaillesDeSections)*/
  /*T(adr_TC) = G(lesTaillesDeSections)*/
  /*T(tmp) = G(lesTaillesDeSections)*/
  /*T(tmp_0) = G(lesTaillesDeSections)*/
  
  /*sid:1510*/
  return;
  /*sid:1510*/
  /*T(EcrireTS) = U*/
  }

}
static int CalculExp(ParamExp exp ) 
{ int num_symb ;
  int nb_symb ;
  int i ;
  int result ;
  
  {/*sid:1161*/
  nb_symb = lesTaillesDeSections.theSymbolTable_nelem;
  /*sid:1161*/
  /*T(exp) = G(exp)*/
  /*T(num_symb) = U*/
  /*T(nb_symb) = G(lesTaillesDeSections)*/
  /*T(i) = U*/
  /*T(result) = U*/
  /*T(CalculExp) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(exp) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  if ((int )exp.tabexp[0].nat == (int )P_IMMEDIAT)
  {/*sid:1164*/
  result = (int )exp.tabexp[0].valimm;
  /*sid:1164*/
  /*T(result) = G(exp)*/
  }
  else {/*sid:1165*/
  num_symb = ChercherDansTS(exp.tabexp[0].nom_etiq, nb_symb);
  /*sid:1165*/
  /*T(num_symb) = G(lesTaillesDeSections) + G(TheCharTable) + G(TheSymbolTable) + G(exp)*/
  /*T(TheCharTable) = G(exp) + G(TheSymbolTable) + G(TheCharTable) + G(lesTaillesDeSections)*/
  
  /*sid:1166*/
  result = (int )TheSymbolTable[num_symb].Value;
  /*sid:1166*/
  /*T(result) = G(lesTaillesDeSections) + G(TheCharTable) + G(TheSymbolTable) + G(exp)*/
  }
  
  /*sid:1168*/
  i = 1;
  /*sid:1168*/
  /*T(num_symb) = G(lesTaillesDeSections) + G(TheCharTable) + G(TheSymbolTable) + G(exp)*/
  /*T(result) = G(lesTaillesDeSections) + G(TheCharTable) + G(TheSymbolTable) + G(exp)*/
  /*T(TheCharTable) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(exp) + G(TheCharTable)*/
  
  /*sid:1169*/
  while (i < exp.nbexp) {if ((int )exp.tabexp[i].nat == (int )P_IMMEDIAT)
                         {result = (int )((long )result - exp.tabexp[i].valimm);}
                         else {num_symb = ChercherDansTS(exp.tabexp[i].nom_etiq,
                                                         nb_symb);
                         result = (int )((unsigned long )result - TheSymbolTable[num_symb].Value);}
    
    i ++;}
  
  /*sid:1169*/
  /*T(i) = G(exp)*/
  
  /*sid:1181*/
  return (result);
  /*sid:1181*/
  /*T(CalculExp) = G(lesTaillesDeSections) + G(TheCharTable) + G(TheSymbolTable) + G(exp)*/
  }

}
static void EcrireParam(FILE *f , LigneLog L ) 
{ int num_symb ;
  int nb_symb ;
  int i ;
  int ip ;
  int nb_param ;
  int val ;
  int p_shift_present ;
  ParamInst p ;
  ParamInstShift param_shift ;
  int tmp ;
  int tmp_0 ;
  int tmp_1 ;
  int tmp_2 ;
  
  {/*sid:1183*/
  nb_symb = lesTaillesDeSections.theSymbolTable_nelem;
  /*sid:1183*/
  /*T(f) = G(f)*/
  /*T(L) = G(L)*/
  /*T(num_symb) = U*/
  /*T(nb_symb) = G(lesTaillesDeSections)*/
  /*T(EcrireParam) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(f) + G(L) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(i) = U*/
  /*T(ip) = U*/
  /*T(nb_param) = U*/
  /*T(val) = U*/
  /*T(p_shift_present) = U*/
  /*T(p) = U*/
  /*T(param_shift) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  p_shift_present = 0;
  ip = 0;
  /*sid:1186*/
  while (ip < L.u.uinst.nbp) {p_shift_present |= (int )L.u.uinst.p[ip].nat == (int )P_SHIFT;
    ip ++;}
  
  /*sid:1186*/
  /*T(ip) = G(L)*/
  /*T(p_shift_present) = G(L)*/
  
  if (p_shift_present)
  {/*sid:1194*/
  nb_param = L.u.uinst.nbp - 1;
  /*sid:1194*/
  /*T(nb_param) = G(L)*/
  }
  else {/*sid:1195*/
  nb_param = L.u.uinst.nbp;
  /*sid:1195*/
  /*T(nb_param) = G(L)*/
  }
  
  /*sid:1196*/
  fprintf((FILE *)f, (char const   *)" %d ", nb_param);
  /*sid:1196*/
  /*T(LeProg) = G(L)*/
  /*T(nbLigneLog) = G(L)*/
  /*T(lesTaillesDeSections) = G(L)*/
  /*T(TheCharTable) = G(L)*/
  /*T(TheSymbolTable) = G(L)*/
  /*T(global) = G(L)*/
  
  /*sid:1197*/
  ip = 0;
  /*sid:1197*/
  /*T(ip) = U*/
  
  /*sid:1198*/
  while (ip < nb_param) {p = L.u.uinst.p[ip];
    fprintf((FILE *)f, (char const   *)"(");
    switch ((int )p.nat) {case P_EXP: 
    switch ((int )p.u.exp.nat) {case P_IMMEDIAT: ;
    /*sid:1207*/
    fprintf((FILE *)f, (char const   *)"IMM %d", p.u.exp.valimm);
    /*sid:1207*/
    /*T(LeProg) = G(L)*/
    /*T(nbLigneLog) = G(L)*/
    /*T(lesTaillesDeSections) = G(L)*/
    /*T(TheCharTable) = G(L)*/
    /*T(TheSymbolTable) = G(L)*/
    /*T(global) = G(L)*/
    
    break;
    case P_ETIQUETTE: 
    num_symb = ChercherDansTS(p.u.exp.nom_etiq, nb_symb);
    /*sid:1210*/
    fprintf((FILE *)f, (char const   *)"SYMB %d", num_symb);
    /*sid:1210*/
    /*T(LeProg) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(nbLigneLog) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(global) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    
    /*sid:1211*/
    break;
    /*sid:1211*/
    /*T(LeProg) = G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(nbLigneLog) = G(nbLigneLog) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(global) = G(global) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    }
    
    /*sid:1213*/
    break;
    /*sid:1213*/
    /*T(LeProg) = G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(nbLigneLog) = G(nbLigneLog) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    /*T(TheCharTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
    /*T(TheSymbolTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
    /*T(global) = G(global) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
    
    case P_NOMREG: ;
    if (ip == L.u.uinst.nbp - 1)
    {/*sid:1216*/
    fprintf((FILE *)f, (char const   *)"REG_S %d", p.u.noreg);
    /*sid:1216*/
    /*T(LeProg) = G(L)*/
    /*T(nbLigneLog) = G(L)*/
    /*T(lesTaillesDeSections) = G(L)*/
    /*T(TheCharTable) = G(L)*/
    /*T(TheSymbolTable) = G(L)*/
    /*T(global) = G(L)*/
    }
    else {if ((int )L.u.uinst.p[ip + 1].nat != (int )P_SHIFT)
          {/*sid:1219*/
          fprintf((FILE *)f, (char const   *)"REG_S %d", p.u.noreg);
          /*sid:1219*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          }
          else {param_shift = L.u.uinst.p[ip + 1].u.exp_shift;
          if ((int )param_shift.nat == (int )P_IMMEDIAT)
          {/*sid:1223*/
          fprintf((FILE *)f, (char const   *)"REG_DEC_I %d %s %d", p.u.noreg,
                  param_shift.dir_shift, param_shift.valimmshift);
          /*sid:1223*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          }
          else {/*sid:1224*/
          fprintf((FILE *)f, (char const   *)"REG_DEC_R %d %s %d", p.u.noreg,
                  param_shift.dir_shift, param_shift.noregshift);
          /*sid:1224*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          }
          }
    }
    
    break;
    case P_NOMREG_EXCL: ;
    /*sid:1228*/
    fprintf((FILE *)f, (char const   *)"REG_MAJ %d", p.u.noreg);
    /*sid:1228*/
    /*T(LeProg) = G(L)*/
    /*T(nbLigneLog) = G(L)*/
    /*T(lesTaillesDeSections) = G(L)*/
    /*T(TheCharTable) = G(L)*/
    /*T(TheSymbolTable) = G(L)*/
    /*T(global) = G(L)*/
    
    break;
    case P_REGS: ;
    fprintf((FILE *)f, (char const   *)"LISTE_REG ");
    i = 0;
    while (i < 16) {/*sid:1237*/
      fprintf((FILE *)f, (char const   *)"%1d", p.u.regs[i]);
      /*sid:1237*/
      /*T(LeProg) = G(L)*/
      /*T(nbLigneLog) = G(L)*/
      /*T(lesTaillesDeSections) = G(L)*/
      /*T(TheCharTable) = G(L)*/
      /*T(TheSymbolTable) = G(L)*/
      /*T(global) = G(L)*/
      
      /*sid:1238*/
      i ++;
      /*sid:1238*/
      /*T(LeProg) = G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
      /*T(nbLigneLog) = G(nbLigneLog) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
      /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
      /*T(TheCharTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
      /*T(TheSymbolTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
      /*T(global) = G(global) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
      }
    
    break;
    case P_INDIR: ;
    if (p.u.indir.nbelt == 1)
    {/*sid:1242*/
    fprintf((FILE *)f, (char const   *)"INDIR_I %d + 0", p.u.indir.noreg1);
    /*sid:1242*/
    /*T(LeProg) = G(L)*/
    /*T(nbLigneLog) = G(L)*/
    /*T(lesTaillesDeSections) = G(L)*/
    /*T(TheCharTable) = G(L)*/
    /*T(TheSymbolTable) = G(L)*/
    /*T(global) = G(L)*/
    }
    else {switch ((int )p.u.indir.nat) {case IND_EXP: 
          val = CalculExp(p.u.indir.exp);
          {if (val < 0) {tmp = -1 * val;}
           else {tmp = val;}
           
           
           if (val < 0) {tmp_0 = '-';}
           else {tmp_0 = '+';}
           
           }
          /*sid:1256*/
          fprintf((FILE *)f, (char const   *)"INDIR_I %d %c %d",
                  p.u.indir.noreg1, tmp_0, tmp);
          /*sid:1256*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          
          break;
          case IND_NOMREG: ;
          if ((int )p.u.indir.signe == (int )S_MOINS) {tmp_1 = '-';}
          else {tmp_1 = '+';}
          
          /*sid:1262*/
          fprintf((FILE *)f, (char const   *)"INDIR_R %d %c %d",
                  p.u.indir.noreg1, tmp_1, p.u.indir.noreg2);
          /*sid:1262*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          
          break;
          case IND_NOMREG_SHIFT: ;
          if ((int )p.u.indir.signe == (int )S_MOINS) {tmp_2 = '-';}
          else {tmp_2 = '+';}
          
          /*sid:1268*/
          fprintf((FILE *)f, (char const   *)"INDIR_DEC_I %d %c %d %s %d",
                  p.u.indir.noreg1, tmp_2, p.u.indir.noreg2,
                  p.u.indir.exp_shift.dir_shift,
                  p.u.indir.exp_shift.valimmshift);
          /*sid:1268*/
          /*T(LeProg) = G(L)*/
          /*T(nbLigneLog) = G(L)*/
          /*T(lesTaillesDeSections) = G(L)*/
          /*T(TheCharTable) = G(L)*/
          /*T(TheSymbolTable) = G(L)*/
          /*T(global) = G(L)*/
          
          /*sid:1269*/
          break;
          /*sid:1269*/
          /*T(LeProg) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(LeProg) + G(L)*/
          /*T(nbLigneLog) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(nbLigneLog) + G(L)*/
          /*T(lesTaillesDeSections) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(L)*/
          /*T(TheCharTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
          /*T(TheSymbolTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
          /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(global) + G(L)*/
          }
    }
    
    /*sid:1272*/
    break;
    /*sid:1272*/
    /*T(LeProg) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(LeProg) + G(L)*/
    /*T(nbLigneLog) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(nbLigneLog) + G(L)*/
    /*T(lesTaillesDeSections) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(L)*/
    /*T(TheCharTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
    /*T(TheSymbolTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
    /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(global) + G(L)*/
    
    case P_SHIFT: 
    break;
    default: ;
    printf((char const   *)"Parametre non traite dans l\'ecriture de la zone Text\n");}
    
    /*sid:1277*/
    fprintf((FILE *)f, (char const   *)")\t");
    /*sid:1277*/
    /*T(LeProg) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(LeProg) + G(L)*/
    /*T(nbLigneLog) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(nbLigneLog) + G(L)*/
    /*T(lesTaillesDeSections) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(L)*/
    /*T(TheCharTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
    /*T(TheSymbolTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
    /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(global) + G(L)*/
    
    ip ++;}
  
  /*sid:1198*/
  /*T(num_symb) = G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections) + G(L)*/
  /*T(i) = G(L)*/
  /*T(ip) = G(L)*/
  /*T(val) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
  /*T(p) = G(L)*/
  /*T(param_shift) = G(L)*/
  /*T(tmp) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
  /*T(tmp_0) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
  /*T(tmp_1) = G(L)*/
  /*T(tmp_2) = G(L)*/
  /*T(LeProg) = G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
  /*T(nbLigneLog) = G(nbLigneLog) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
  /*T(TheCharTable) = G(TheCharTable) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(L)*/
  /*T(TheSymbolTable) = G(TheSymbolTable) + G(lesTaillesDeSections) + G(TheCharTable) + G(L)*/
  /*T(global) = G(global) + G(lesTaillesDeSections) + G(TheSymbolTable) + G(TheCharTable) + G(L)*/
  
  /*sid:1511*/
  return;
  /*sid:1511*/
  /*T(EcrireParam) = U*/
  }

}
static void EcrireTextOuData(FILE *f , NomZone zcour ) 
{ int i ;
  ParamReserv p ;
  int num_symb ;
  int nb_symb ;
  champs_inst s_i ;
  Elem *pE ;
  LigneLog L ;
  char const   *tmp ;
  
  {/*sid:1282*/
  nb_symb = lesTaillesDeSections.theSymbolTable_nelem;
  /*sid:1282*/
  /*T(EcrireTextOuData) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(f) + G(zcour) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(f) = G(f)*/
  /*T(zcour) = G(zcour)*/
  /*T(i) = U*/
  /*T(p) = U*/
  /*T(num_symb) = U*/
  /*T(nb_symb) = G(lesTaillesDeSections)*/
  /*T(s_i) = U*/
  /*T(pE) = U*/
  /*T(L) = U*/
  /*T(tmp) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  if ((int )zcour == (int )Z_DATA)
  {/*sid:1285*/
  fprintf((FILE *)f, (char const   *)"%d\n",
          lesTaillesDeSections.theDataZone_nelem);
  /*sid:1285*/
  /*T(LeProg) = G(lesTaillesDeSections)*/
  /*T(nbLigneLog) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(lesTaillesDeSections)*/
  /*T(TheSymbolTable) = G(lesTaillesDeSections)*/
  /*T(global) = G(lesTaillesDeSections)*/
  }
  else {/*sid:1286*/
  fprintf((FILE *)f, (char const   *)"%d\n",
          lesTaillesDeSections.theTextZone_nelem);
  /*sid:1286*/
  /*T(LeProg) = G(lesTaillesDeSections)*/
  /*T(nbLigneLog) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(lesTaillesDeSections)*/
  /*T(TheSymbolTable) = G(lesTaillesDeSections)*/
  /*T(global) = G(lesTaillesDeSections)*/
  }
  
  i = 0;
  /*sid:1288*/
  while (i < nbLigneLog) {pE = & LeProg[i];
    L = pE->ligne;
    if ((int )pE->zone_cour == (int )zcour) {switch ((int )L.nat) {case LL_INST: 
                                             s_i = L.u.uinst.s_i;
                                             if ((int )s_i.pile[0] != '\000')
                                             {tmp = (char const   *)(s_i.pile);}
                                             else {tmp = "XX";}
                                             
                                             /*sid:1304*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"(%s %s %1d %c %1d %s)\t",
                                                     s_i.base, s_i.cond,
                                                     s_i.cod_cond, s_i.BHW,
                                                     s_i.S, tmp);
                                             /*sid:1304*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             
                                             EcrireParam(f, L);
                                             fprintf((FILE *)f,
                                                     (char const   *)"\n");
                                             break;
                                             case LL_RESERV_N_INIT: ;
                                             if ((int )L.u.urni.dir == (int )R_INT) {
                                               fprintf((FILE *)f,
                                                       (char const   *)"SKIP %d \n",
                                                       L.u.urni.nboctets);}
                                             
                                             break;
                                             case LL_ALIGN: ;
                                             if (pE->nb_bits != 0L) {
                                               fprintf((FILE *)f,
                                                       (char const   *)"SKIP %d \n",
                                                       pE->nb_bits / 8L);}
                                             
                                             break;
                                             case LL_RESERV_INIT: 
                                             p = L.u.uri.p0;
                                             switch ((int )L.u.uri.dir) {case R_WORD: ;
                                             fprintf((FILE *)f,
                                                     (char const   *)"WORD ");
                                             if ((int )p.nat == (int )PR_NOMBRE)
                                             {/*sid:1325*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_IMM %d\n",
                                                     p.nb);
                                             /*sid:1325*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             else {num_symb = ChercherDansTS(
                                                   p.nom_etiq, nb_symb);
                                             /*sid:1327*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_SYMB %d\n",
                                                     num_symb);
                                             /*sid:1327*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             
                                             break;
                                             case R_HALF: ;
                                             fprintf((FILE *)f,
                                                     (char const   *)"HALF ");
                                             if ((int )p.nat == (int )PR_NOMBRE)
                                             {/*sid:1334*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_IMM %d\n",
                                                     p.nb);
                                             /*sid:1334*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             else {num_symb = ChercherDansTS(
                                                   p.nom_etiq, nb_symb);
                                             /*sid:1336*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_SYMB %d\n",
                                                     num_symb);
                                             /*sid:1336*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             
                                             break;
                                             case R_BYTE: ;
                                             fprintf((FILE *)f,
                                                     (char const   *)"BYTE ");
                                             if ((int )p.nat == (int )PR_NOMBRE)
                                             {/*sid:1343*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_IMM %d\n",
                                                     p.nb);
                                             /*sid:1343*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             else {num_symb = ChercherDansTS(
                                                   p.nom_etiq, nb_symb);
                                             /*sid:1345*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"DATA_SYMB %d\n",
                                                     num_symb);
                                             /*sid:1345*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             }
                                             
                                             break;
                                             case R_ASCIZ: ;
                                             /*sid:1349*/
                                             fprintf((FILE *)f,
                                                     (char const   *)"ASCIZ \"%s\"\n",
                                                     p.chaine);
                                             /*sid:1349*/
                                             /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
                                             
                                             break;
                                             default: ;
                                             printf((char const   *)"cas non traite en ecriture de la zone Data\n");}
                                             
                                             /*sid:1354*/
                                             break;
                                             /*sid:1354*/
                                             /*T(global) = G(global) + G(TheSymbolTable) + G(TheCharTable) + G(LeProg) + G(nbLigneLog) + G(zcour) + G(lesTaillesDeSections)*/
                                             
                                             default: ;
                                             break;}
      }
    
    /*sid:1360*/
    i ++;
    /*sid:1360*/
    /*T(global) = G(zcour) + G(global) + G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog) + G(lesTaillesDeSections)*/
    }
  
  /*sid:1288*/
  /*T(i) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(p) = G(TheSymbolTable) + G(TheCharTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(num_symb) = G(nbLigneLog) + G(LeProg) + G(TheSymbolTable) + G(TheCharTable) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(s_i) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(pE) = G(zcour) + G(nbLigneLog) + G(LeProg) + G(TheCharTable) + G(TheSymbolTable) + G(lesTaillesDeSections)*/
  /*T(L) = G(TheSymbolTable) + G(TheCharTable) + G(LeProg) + G(nbLigneLog) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(tmp) = G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(LeProg) + G(zcour) + G(lesTaillesDeSections)*/
  /*T(LeProg) = G(zcour) + G(LeProg) + G(TheCharTable) + G(TheSymbolTable) + G(nbLigneLog) + G(lesTaillesDeSections)*/
  /*T(nbLigneLog) = G(zcour) + G(nbLigneLog) + G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(lesTaillesDeSections)*/
  /*T(lesTaillesDeSections) = G(zcour) + G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog) + G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(zcour) + G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog) + G(lesTaillesDeSections)*/
  /*T(TheSymbolTable) = G(zcour) + G(TheSymbolTable) + G(TheCharTable) + G(LeProg) + G(nbLigneLog) + G(lesTaillesDeSections)*/
  /*T(global) = G(zcour) + G(global) + G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog) + G(lesTaillesDeSections)*/
  
  /*sid:1512*/
  return;
  /*sid:1512*/
  /*T(EcrireTextOuData) = U*/
  }

}
void Phase1(FILE *fsource , FILE *finterm ) 
{ int result_phase_1 ;
  
  {/*sid:1363*/
  result_phase_1 = 0;
  /*sid:1363*/
  /*T(Phase1) = G(TheCharTable) + G(nbLigneLog) + G(global) + G(fsource) + G(finterm) + G(LeProg) + G(lesTaillesDeSections) + G(TheSymbolTable)*/
  /*T(fsource) = G(fsource)*/
  /*T(finterm) = G(finterm)*/
  /*T(result_phase_1) = U*/
  /*T(LeProg) = G(LeProg)*/
  /*T(nbLigneLog) = G(nbLigneLog)*/
  /*T(lesTaillesDeSections) = G(lesTaillesDeSections)*/
  /*T(TheCharTable) = G(TheCharTable)*/
  /*T(TheSymbolTable) = G(TheSymbolTable)*/
  /*T(global) = G(global)*/
  
  result_phase_1 = Analyse(fsource, LeProg, & nbLigneLog);
  if (result_phase_1 != 0) {printf((char const   *)"Erreur de syntaxe - arret \n");
    exit(2);}
  
  /*sid:1370*/
  result_phase_1 = Verif(LeProg, nbLigneLog);
  /*sid:1370*/
  /*T(result_phase_1) = G(nbLigneLog)*/
  
  if (result_phase_1 != 0) {printf((char const   *)"Erreur de syntaxe contextuelle - arret \n");
    exit(3);}
  
  /*sid:1376*/
  Decoration(LeProg, nbLigneLog);
  /*sid:1376*/
  /*T(lesTaillesDeSections) = G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog)*/
  /*T(TheCharTable) = G(LeProg) + G(TheSymbolTable) + G(nbLigneLog) + G(TheCharTable)*/
  /*T(TheSymbolTable) = G(nbLigneLog) + G(TheCharTable) + G(LeProg) + G(TheSymbolTable)*/
  
  /*sid:1377*/
  EcrireTC(finterm);
  /*sid:1377*/
  /*T(LeProg) = G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog)*/
  /*T(nbLigneLog) = G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog)*/
  /*T(global) = G(TheCharTable) + G(TheSymbolTable) + G(LeProg) + G(nbLigneLog)*/
  
  EcrireTS(finterm);
  EcrireTextOuData(finterm, Z_TEXT);
  EcrireTextOuData(finterm, Z_DATA);
  fclose(finterm);
  /*sid:1513*/
  return;
  /*sid:1513*/
  /*T(Phase1) = U*/
  }

}
