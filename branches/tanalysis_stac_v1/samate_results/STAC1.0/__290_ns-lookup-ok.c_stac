/* Generated by CIL v. 1.3.6 */
/* print_CIL_Input is false */

typedef unsigned char __u_char;
typedef long long __quad_t;
typedef long __off_t;
typedef __quad_t __off64_t;
typedef int __pid_t;
typedef long __time_t;
typedef __u_char u_char;
typedef __pid_t pid_t;
typedef __time_t time_t;
typedef unsigned int size_t;
typedef short int16_t;
typedef unsigned short u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned int uint32_t;
typedef uint32_t in_addr_t;
struct in_addr {
   in_addr_t s_addr ;
};
enum __ns_type {
    ns_t_invalid = 0,
    ns_t_a = 1,
    ns_t_ns = 2,
    ns_t_md = 3,
    ns_t_mf = 4,
    ns_t_cname = 5,
    ns_t_soa = 6,
    ns_t_mb = 7,
    ns_t_mg = 8,
    ns_t_mr = 9,
    ns_t_null = 10,
    ns_t_wks = 11,
    ns_t_ptr = 12,
    ns_t_hinfo = 13,
    ns_t_minfo = 14,
    ns_t_mx = 15,
    ns_t_txt = 16,
    ns_t_rp = 17,
    ns_t_afsdb = 18,
    ns_t_x25 = 19,
    ns_t_isdn = 20,
    ns_t_rt = 21,
    ns_t_nsap = 22,
    ns_t_nsap_ptr = 23,
    ns_t_sig = 24,
    ns_t_key = 25,
    ns_t_px = 26,
    ns_t_gpos = 27,
    ns_t_aaaa = 28,
    ns_t_loc = 29,
    ns_t_nxt = 30,
    ns_t_eid = 31,
    ns_t_nimloc = 32,
    ns_t_srv = 33,
    ns_t_atma = 34,
    ns_t_naptr = 35,
    ns_t_kx = 36,
    ns_t_cert = 37,
    ns_t_a6 = 38,
    ns_t_dname = 39,
    ns_t_sink = 40,
    ns_t_opt = 41,
    ns_t_apl = 42,
    ns_t_tkey = 249,
    ns_t_tsig = 250,
    ns_t_ixfr = 251,
    ns_t_axfr = 252,
    ns_t_mailb = 253,
    ns_t_maila = 254,
    ns_t_any = 255,
    ns_t_zxfr = 256,
    ns_t_max = 65536
} ;
enum __ns_class {
    ns_c_invalid = 0,
    ns_c_in = 1,
    ns_c_2 = 2,
    ns_c_chaos = 3,
    ns_c_hs = 4,
    ns_c_none = 254,
    ns_c_any = 255,
    ns_c_max = 65536
} ;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef void _IO_lock_t;
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
typedef struct _IO_FILE _IO_FILE;
struct databuf {
   struct databuf *d_next ;
   u_int32_t d_ttl ;
   unsigned int d_flags : 7 ;
   unsigned int d_cred : 3 ;
   unsigned int d_clev : 6 ;
   int16_t d_zone ;
   int16_t d_class ;
   int16_t d_type ;
   int16_t d_mark ;
   int16_t d_size ;
   int16_t d_rcnt ;
   u_int32_t d_nstime ;
   u_char d_data[sizeof(char *)] ;
};
struct zoneinfo {
   char *z_origin ;
   time_t z_time ;
   time_t z_lastupdate ;
   u_int32_t z_refresh ;
   u_int32_t z_retry ;
   u_int32_t z_expire ;
   u_int32_t z_minimum ;
   u_int32_t z_serial ;
   char *z_source ;
   time_t z_ftime ;
   struct in_addr z_xaddr ;
   struct in_addr z_addr[16] ;
   u_char z_addrcnt ;
   u_char z_type ;
   u_int16_t z_flags ;
   pid_t z_xferpid ;
   int z_class ;
};
struct namebuf {
   char *n_dname ;
   struct databuf *n_data ;
};
extern  __attribute__((__nothrow__)) uint32_t ntohl(uint32_t __netlong )  __attribute__((__const__)) ;
extern  __attribute__((__nothrow__)) char *inet_ntoa(struct in_addr __in ) ;
extern void ( /* format attribute */  syslog)(int __pri , char const   *__fmt 
                                              , ...) ;
extern int _IO_getc(_IO_FILE *__fp ) ;
extern int fclose(FILE *__stream ) ;
extern FILE *fopen(char const   * __restrict  __filename ,
                   char const   * __restrict  __modes ) ;
extern int printf(char const   * __restrict  __format  , ...) ;
extern  __attribute__((__nothrow__)) int ( /* format attribute */  snprintf)(
char * __restrict  __s , size_t __maxlen ,
char const   * __restrict  __format  , ...) ;
extern char *fgets(char * __restrict  __s , int __n ,
                   FILE * __restrict  __stream ) ;
extern  __attribute__((__nothrow__)) void *malloc(size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) void *calloc(size_t __nmemb ,
                                                  size_t __size )  __attribute__((__malloc__)) ;
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
extern  __attribute__((__nothrow__)) void bcopy(void const   *__src ,
                                                void *__dest , size_t __n )  __attribute__((__nonnull__(1,2))) ;
extern  __attribute__((__nothrow__,
__noreturn__)) void __assert_fail(char const   *__assertion ,
                                  char const   *__file , unsigned int __line ,
                                  char const   *__function ) ;
struct zoneinfo *zones  = (struct zoneinfo *)((void *)0);
struct in_addr data_inaddr(u_char const   *data ) ;
struct namebuf *nlookup(u_char *dname ) ;
struct databuf **create_databuf_list(int num ) ;
static void nslookupComplain(char const   *sysloginfo ,
                             char const   *queryname ,
                             char const   *complaint_2 , char const   *dname ,
                             struct databuf  const  *a_rr ,
                             struct databuf  const  *nsdp ) 
{ char *a ;
  char *ns ;
  char buf[999] ;
  char const   *tmp ;
  char const   *tmp_0 ;
  struct in_addr tmp_1 ;
  char *tmp_2 ;
  struct in_addr tmp_3 ;
  char *tmp_4 ;
  struct in_addr tmp_5 ;
  char *tmp_6 ;
  size_t tmp_7 ;
  
  {/*sid:1*/
  printf((char const   *)"NS \'%s\' %s\n", dname, complaint_2);
  /*sid:1*/
  /*T(zones) = G(dname)*/
  /*T(sysloginfo) = G(sysloginfo)*/
  /*T(queryname) = G(queryname)*/
  /*T(complaint_2) = G(complaint_2)*/
  /*T(dname) = G(dname)*/
  /*T(a_rr) = G(a_rr)*/
  /*T(nsdp) = G(nsdp)*/
  /*T(a) = U*/
  /*T(ns) = U*/
  /*T(buf) = U*/
  /*T(tmp) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(tmp_5) = U*/
  /*T(tmp_6) = U*/
  /*T(tmp_7) = U*/
  /*T(nsa) = G(dname)*/
  /*T(complaint) = G(dname)*/
  /*T(complaint_0) = G(dname)*/
  /*T(complaint_1) = G(dname)*/
  /*T(nslookupComplain) = G(complaint_0) + G(nsa) + G(nsdp) + G(dname) + G(queryname) + G(sysloginfo) + G(complaint_2) + G(a_rr) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:3*/
  if (sysloginfo) {/*sid:5*/
    if (queryname) {/*sid:6*/
      {/*sid:7*/
       ns = (char *)((void *)0);
       /*sid:7*/
       /*T(ns) = G(queryname) + G(sysloginfo)*/
       
       /*sid:8*/
       a = ns;
       /*sid:8*/
       /*T(a) = G(queryname) + G(sysloginfo)*/
       }
      /*sid:10*/
      if (a != (void *)0) {/*sid:11*/
      goto _L;}
      else {/*sid:13*/
      if (ns != (void *)0)
      {/*sid:14*/
      {/*sid:15*/
       _L: /* CIL Label */ 
       /*sid:17*/
       if (ns)
       {/*sid:18*/
       tmp = (char const   *)ns;
       /*sid:18*/
       /*T(tmp) = G(queryname) + G(sysloginfo)*/
       }
       else {/*sid:19*/
       tmp = "<Not Available>";
       /*sid:19*/
       /*T(tmp) = G(queryname) + G(sysloginfo)*/
       }
       
       
       /*sid:20*/
       /*sid:22*/
       if (a)
       {/*sid:23*/
       tmp_0 = (char const   *)a;
       /*sid:23*/
       /*T(tmp_0) = G(queryname) + G(sysloginfo)*/
       }
       else {/*sid:24*/
       tmp_0 = "<Not Available>";
       /*sid:24*/
       /*T(tmp_0) = G(queryname) + G(sysloginfo)*/
       }
       
       
       /*sid:25*/
       {/*sid:26*/
       tmp_1 = data_inaddr((u_char const   *)(a_rr->d_data));
       /*sid:27*/
       tmp_2 = inet_ntoa(tmp_1);}
       
       /*sid:25*/
       /*T(tmp_1) = G(queryname) + G(sysloginfo)*/
       /*T(tmp_2) = T*/
       }
      /*sid:28*/
      snprintf((char *)(buf), 999U,
               (char const   *)"%s: query(%s) %s (%s:%s) learnt (A=%s:NS=%s)",
               sysloginfo, queryname, complaint_2, dname, tmp_2, tmp_0, tmp);
      /*sid:28*/
      /*T(zones) = G(sysloginfo)*/
      /*T(nsa) = G(sysloginfo)*/
      /*T(complaint) = G(sysloginfo)*/
      /*T(complaint_0) = G(sysloginfo)*/
      /*T(complaint_1) = G(sysloginfo)*/
      }
      else {/*sid:29*/
      printf((char const   *)"Calling sprintf!\n");
      /*sid:30*/
      tmp_3 = data_inaddr((u_char const   *)(a_rr->d_data));
      /*sid:30*/
      /*T(tmp_3) = G(queryname) + G(sysloginfo)*/
      
      /*sid:31*/
      tmp_4 = inet_ntoa(tmp_3);
      /*sid:31*/
      /*T(tmp_4) = T*/
      
      /*sid:32*/
      printf((char const   *)"sprintf args: %s: query(%s) %s (%s:%s)",
             sysloginfo, queryname, complaint_2, dname, tmp_4);
      /*sid:32*/
      /*T(zones) = G(sysloginfo)*/
      /*T(nsa) = G(sysloginfo)*/
      /*T(complaint) = G(sysloginfo)*/
      /*T(complaint_0) = G(sysloginfo)*/
      /*T(complaint_1) = G(sysloginfo)*/
      
      /*sid:33*/
      tmp_5 = data_inaddr((u_char const   *)(a_rr->d_data));
      /*sid:33*/
      /*T(tmp_5) = G(queryname) + G(sysloginfo)*/
      
      /*sid:34*/
      tmp_6 = inet_ntoa(tmp_5);
      /*sid:34*/
      /*T(tmp_6) = T*/
      
      /*sid:35*/
      snprintf((char *)(buf), 999U,
               (char const   *)"%s: query(%s) %s (%s:%s)", sysloginfo,
               queryname, complaint_2, dname, tmp_6);
      /*sid:36*/
      syslog(6, (char const   *)(buf));
      /*sid:37*/
      tmp_7 = strlen((char const   *)(buf));
      /*sid:37*/
      /*T(tmp_7) = G(queryname) + G(sysloginfo)*/
      
      /*sid:38*/
      printf((char const   *)"strlen(buf) = %d\n", tmp_7);
      /*sid:38*/
      /*T(zones) = G(queryname) + G(sysloginfo) + G(dname)*/
      /*T(tmp) = G(queryname) + G(sysloginfo)*/
      /*T(tmp_0) = G(queryname) + G(sysloginfo)*/
      /*T(tmp_1) = G(queryname) + G(sysloginfo)*/
      /*T(tmp_2) = T*/
      /*T(nsa) = G(queryname) + G(sysloginfo) + G(dname)*/
      /*T(complaint) = G(queryname) + G(sysloginfo) + G(dname)*/
      /*T(complaint_0) = G(queryname) + G(sysloginfo) + G(dname)*/
      /*T(complaint_1) = G(queryname) + G(sysloginfo) + G(dname)*/
      }
      }
      }
    }
  
  /*sid:146*/
  return;
  /*sid:146*/
  /*T(zones) = G(queryname) + G(sysloginfo) + G(dname)*/
  /*T(a) = G(queryname) + G(sysloginfo)*/
  /*T(ns) = G(queryname) + G(sysloginfo)*/
  /*T(tmp) = G(queryname) + G(sysloginfo)*/
  /*T(tmp_0) = G(queryname) + G(sysloginfo)*/
  /*T(tmp_1) = G(queryname) + G(sysloginfo)*/
  /*T(tmp_2) = T*/
  /*T(tmp_3) = G(queryname) + G(sysloginfo)*/
  /*T(tmp_4) = T*/
  /*T(tmp_5) = G(queryname) + G(sysloginfo)*/
  /*T(tmp_6) = T*/
  /*T(tmp_7) = G(queryname) + G(sysloginfo)*/
  /*T(nsa) = G(queryname) + G(sysloginfo) + G(dname)*/
  /*T(complaint) = G(queryname) + G(sysloginfo) + G(dname)*/
  /*T(complaint_0) = G(queryname) + G(sysloginfo) + G(dname)*/
  /*T(complaint_1) = G(queryname) + G(sysloginfo) + G(dname)*/
  /*T(nslookupComplain) = G(queryname) + G(sysloginfo)*/
  }

}
static struct in_addr nsa ;
int nslookup(struct databuf **nsp , char const   *syslogdname ,
             char const   *sysloginfo ) ;
static char *complaint  = (char *)"Bogus (0.0.0.0) A RR";
static char *complaint_0  = (char *)"Bogus LOOPBACK A RR";
static char *complaint_1  = (char *)"Bogus BROADCAST A RR";
int nslookup(struct databuf **nsp , char const   *syslogdname ,
             char const   *sysloginfo ) 
{ register struct namebuf *np ;
  register struct databuf *dp ;
  register struct databuf *nsdp ;
  u_char *dname ;
  int i ;
  int class ;
  int found_arr ;
  struct in_addr tmp_0 ;
  struct in_addr tmp_1 ;
  uint32_t tmp_2 ;
  struct in_addr tmp_3 ;
  uint32_t tmp_4 ;
  
  {/*sid:42*/
  found_arr = 0;
  /*sid:42*/
  /*T(zones) = G(zones)*/
  /*T(nsp) = G(nsp)*/
  /*T(syslogdname) = G(syslogdname)*/
  /*T(sysloginfo) = G(sysloginfo)*/
  /*T(np) = U*/
  /*T(dp) = U*/
  /*T(nsdp) = U*/
  /*T(dname) = U*/
  /*T(i) = U*/
  /*T(class) = U*/
  /*T(found_arr) = U*/
  /*T(tmp_0) = U*/
  /*T(tmp_1) = U*/
  /*T(tmp_2) = U*/
  /*T(tmp_3) = U*/
  /*T(tmp_4) = U*/
  /*T(nsa) = G(nsa)*/
  /*T(complaint) = G(complaint)*/
  /*T(complaint_0) = G(complaint_0)*/
  /*T(complaint_1) = G(complaint_1)*/
  /*T(nslookup) = G(complaint_0) + G(nsa) + G(sysloginfo) + G(nsp) + G(syslogdname) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:43*/
  printf((char const   *)"syslogdname = %s\n", syslogdname);
  /*sid:43*/
  /*T(zones) = G(syslogdname)*/
  /*T(nsa) = G(syslogdname)*/
  /*T(complaint) = G(syslogdname)*/
  /*T(complaint_0) = G(syslogdname)*/
  /*T(complaint_1) = G(syslogdname)*/
  
  /*sid:44*/
  printf((char const   *)"sysloginfo = %s\n", sysloginfo);
  /*sid:44*/
  /*T(zones) = G(sysloginfo)*/
  /*T(nsa) = G(sysloginfo)*/
  /*T(complaint) = G(sysloginfo)*/
  /*T(complaint_0) = G(sysloginfo)*/
  /*T(complaint_1) = G(sysloginfo)*/
  
  /*sid:45*/
  i = 0;
  /*sid:46*/
  while (i < 2) {/*sid:50*/
    nsdp = *(nsp + i);
    /*sid:51*/
    class = (int )nsdp->d_class;
    /*sid:52*/
    printf((char const   *)"Class = %d\n", class);
    /*sid:53*/
    printf((char const   *)"C_IN = %d, class = %d\n", ns_c_in, class);
    /*sid:53*/
    /*T(zones) = U*/
    /*T(nsa) = U*/
    /*T(complaint) = U*/
    /*T(complaint_0) = U*/
    /*T(complaint_1) = U*/
    
    /*sid:54*/
    dname = nsdp->d_data;
    /*sid:55*/
    np = nlookup(dname);
    /*sid:56*/
    dp = np->n_data;
    /*sid:57*/
    while (dp != (void *)0) {/*sid:61*/
      printf((char const   *)"We\'re inside for loop!\n");
      /*sid:62*/
      printf((char const   *)"T_A = %d, dp->d_type = %d\n", ns_t_a, dp->d_type);
      /*sid:62*/
      /*T(zones) = U*/
      /*T(nsa) = U*/
      /*T(complaint) = U*/
      /*T(complaint_0) = U*/
      /*T(complaint_1) = U*/
      
      /*sid:64*/
      if ((int )dp->d_type == (int )ns_t_cname) {/*sid:66*/
        if ((int )dp->d_class == class) {/*sid:67*/
          goto finish;
          /*sid:67*/
          /*T(zones) = T*/
          /*T(nsa) = T*/
          /*T(complaint) = T*/
          /*T(complaint_0) = T*/
          /*T(complaint_1) = T*/
          }
        }
      
      /*sid:71*/
      if ((int )dp->d_type != (int )ns_t_a) {/*sid:72*/
      goto __Cont;}
      else {/*sid:74*/
      if ((int )dp->d_class != class) {/*sid:75*/
        goto __Cont;}
      }
      
      /*sid:77*/
      {/*sid:78*/
       tmp_0 = data_inaddr((u_char const   *)(dp->d_data));
       /*sid:79*/
       }
      /*sid:80*/
      if (tmp_0.s_addr == 0U) {/*sid:81*/
        printf((char const   *)"Calling nslookupComplain!\n");
        /*sid:82*/
        nslookupComplain(sysloginfo, syslogdname, (char const   *)complaint,
                         (char const   *)dname, (struct databuf  const  *)dp,
                         (struct databuf  const  *)nsdp);
        /*sid:82*/
        /*T(zones) = T*/
        /*T(nsa) = T*/
        /*T(complaint) = T*/
        /*T(complaint_0) = T*/
        /*T(complaint_1) = T*/
        
        /*sid:83*/
        goto __Cont;}
      
      /*sid:85*/
      tmp_1 = data_inaddr((u_char const   *)(dp->d_data));
      /*sid:86*/
      tmp_2 = ntohl(tmp_1.s_addr);
      /*sid:87*/
      if (tmp_2 == 2130706433U) {/*sid:88*/
        nslookupComplain(sysloginfo, syslogdname, (char const   *)complaint_0,
                         (char const   *)dname, (struct databuf  const  *)dp,
                         (struct databuf  const  *)nsdp);
        /*sid:88*/
        /*T(zones) = T*/
        /*T(nsa) = T*/
        /*T(complaint) = T*/
        /*T(complaint_0) = T*/
        /*T(complaint_1) = T*/
        
        /*sid:89*/
        goto __Cont;}
      
      /*sid:91*/
      tmp_3 = data_inaddr((u_char const   *)(dp->d_data));
      /*sid:92*/
      tmp_4 = ntohl(tmp_3.s_addr);
      /*sid:93*/
      if (tmp_4 == 4294967295U) {/*sid:94*/
        nslookupComplain(sysloginfo, syslogdname, (char const   *)complaint_1,
                         (char const   *)dname, (struct databuf  const  *)dp,
                         (struct databuf  const  *)nsdp);
        /*sid:94*/
        /*T(zones) = T*/
        /*T(nsa) = T*/
        /*T(complaint) = T*/
        /*T(complaint_0) = T*/
        /*T(complaint_1) = T*/
        
        /*sid:95*/
        goto __Cont;}
      
      /*sid:97*/
      found_arr ++;
      /*sid:98*/
      nsa = data_inaddr((u_char const   *)(dp->d_data));
      /*sid:98*/
      /*T(zones) = T*/
      /*T(nsa) = T*/
      /*T(complaint) = T*/
      /*T(complaint_0) = T*/
      /*T(complaint_1) = T*/
      
      /*sid:99*/
      __Cont: /* CIL Label */ 
      dp = dp->d_next;
      /*sid:99*/
      /*T(zones) = T*/
      /*T(nsa) = T*/
      /*T(complaint) = T*/
      /*T(complaint_0) = T*/
      /*T(complaint_1) = T*/
      }
    
    /*sid:57*/
    /*T(zones) = T*/
    /*T(nsa) = T*/
    /*T(complaint) = T*/
    /*T(complaint_0) = T*/
    /*T(complaint_1) = T*/
    
    /*sid:100*/
    i ++;}
  
  /*sid:46*/
  /*T(zones) = T*/
  /*T(np) = T*/
  /*T(dp) = T*/
  /*T(nsdp) = T*/
  /*T(dname) = T*/
  /*T(i) = T*/
  /*T(class) = T*/
  /*T(found_arr) = T*/
  /*T(tmp_0) = T*/
  /*T(tmp_1) = T*/
  /*T(tmp_2) = T*/
  /*T(tmp_3) = T*/
  /*T(tmp_4) = T*/
  /*T(nsa) = T*/
  /*T(complaint) = T*/
  /*T(complaint_0) = T*/
  /*T(complaint_1) = T*/
  
  /*sid:101*/
  finish: 
  return (found_arr);
  /*sid:101*/
  /*T(nslookup) = T*/
  }

}
struct namebuf *nlookup(u_char *dname ) 
{ struct databuf **double_nb ;
  struct namebuf *nbuf ;
  struct databuf **tmp_1 ;
  
  {/*sid:102*/
  nbuf = (struct namebuf *)calloc(1U, sizeof(struct namebuf ));
  /*sid:102*/
  /*T(zones) = G(zones)*/
  /*T(dname) = G(dname)*/
  /*T(double_nb) = U*/
  /*T(nbuf) = U*/
  /*T(tmp_1) = U*/
  /*T(nsa) = G(nsa)*/
  /*T(complaint) = G(complaint)*/
  /*T(complaint_0) = G(complaint_0)*/
  /*T(complaint_1) = G(complaint_1)*/
  /*T(nlookup) = G(complaint_0) + G(nsa) + G(dname) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:103*/
  double_nb = create_databuf_list(1);
  /*sid:104*/
  tmp_1 = double_nb;
  /*sid:105*/
  double_nb ++;
  /*sid:106*/
  nbuf->n_data = *tmp_1;
  /*sid:107*/
  return (nbuf);
  /*sid:107*/
  /*T(nlookup) = U*/
  }

}
struct in_addr data_inaddr(u_char const   *data ) 
{ struct in_addr ret ;
  u_int32_t tmp ;
  
  {/*sid:108*/
  bcopy((void const   *)((char *)data), (void *)((char *)(& tmp)), 4U);
  /*sid:108*/
  /*T(zones) = G(zones)*/
  /*T(data) = G(data)*/
  /*T(ret) = U*/
  /*T(tmp) = U*/
  /*T(nsa) = G(nsa)*/
  /*T(complaint) = G(complaint)*/
  /*T(complaint_0) = G(complaint_0)*/
  /*T(complaint_1) = G(complaint_1)*/
  /*T(data_inaddr) = G(complaint_0) + G(nsa) + G(data) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:109*/
  ret.s_addr = tmp;
  /*sid:110*/
  return (ret);
  /*sid:110*/
  /*T(data_inaddr) = U*/
  }

}
struct databuf **create_databuf_list(int num ) 
{ struct databuf **dbl ;
  struct databuf **temp ;
  int i ;
  FILE *f ;
  
  {/*sid:111*/
  dbl = (struct databuf **)malloc((unsigned int )num * sizeof(struct databuf *));
  /*sid:111*/
  /*T(zones) = G(zones)*/
  /*T(num) = G(num)*/
  /*T(dbl) = G(num)*/
  /*T(temp) = U*/
  /*T(i) = U*/
  /*T(f) = U*/
  /*T(nsa) = G(nsa)*/
  /*T(complaint) = G(complaint)*/
  /*T(complaint_0) = G(complaint_0)*/
  /*T(complaint_1) = G(complaint_1)*/
  /*T(create_databuf_list) = G(complaint_0) + G(nsa) + G(num) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:112*/
  temp = dbl;
  /*sid:112*/
  /*T(temp) = G(num)*/
  
  /*sid:113*/
  f = fopen((char const   *)"address_file", (char const   *)"r");
  /*sid:114*/
  i = 0;
  /*sid:115*/
  while (i < num) {/*sid:119*/
    *dbl = (struct databuf *)calloc(1U, sizeof(struct databuf ));
    /*sid:120*/
    (*dbl)->d_data[0] = (u_char )_IO_getc(f);
    /*sid:121*/
    (*dbl)->d_data[1] = (u_char )_IO_getc(f);
    /*sid:122*/
    (*dbl)->d_data[2] = (u_char )_IO_getc(f);
    /*sid:123*/
    (*dbl)->d_data[3] = (u_char )_IO_getc(f);
    /*sid:124*/
    (*dbl)->d_class = (short )ns_c_in;
    /*sid:125*/
    (*dbl)->d_type = (short )ns_t_a;
    /*sid:126*/
    (*dbl)->d_next = (struct databuf *)((void *)0);
    /*sid:127*/
    dbl ++;
    /*sid:128*/
    i ++;}
  
  /*sid:115*/
  /*T(i) = G(num)*/
  
  /*sid:129*/
  fclose(f);
  /*sid:130*/
  return (temp);
  /*sid:130*/
  /*T(create_databuf_list) = G(num)*/
  }

}
int main(int argc , char **argv ) 
{ struct databuf **nsp ;
  char syslogdname[1000] ;
  char sysloginfo[1000] ;
  FILE *f ;
  int __retres ;
  
  {/*sid:132*/
  if (! (argc == 2)) {/*sid:134*/
    __assert_fail("argc == 2", "./290/ns-lookup-ok.c", 350U, "main");}
  
  /*sid:132*/
  /*T(zones) = G(zones)*/
  /*T(argc) = G(argc)*/
  /*T(argv) = G(argv)*/
  /*T(nsp) = U*/
  /*T(syslogdname) = U*/
  /*T(sysloginfo) = U*/
  /*T(f) = U*/
  /*T(nsa) = G(nsa)*/
  /*T(complaint) = G(complaint)*/
  /*T(complaint_0) = G(complaint_0)*/
  /*T(complaint_1) = G(complaint_1)*/
  /*T(__retres) = U*/
  /*T(main) = G(complaint_0) + G(nsa) + G(argv) + G(argc) + G(zones) + G(complaint) + G(complaint_1)*/
  
  /*sid:135*/
  f = fopen((char const   *)*(argv + 1), (char const   *)"r");
  /*sid:135*/
  /*T(f) = G(argc)*/
  
  /*sid:137*/
  if (! (f != (void *)0)) {/*sid:139*/
    __assert_fail("f!=((void *)0)", "./290/ns-lookup-ok.c", 352U, "main");}
  
  /*sid:140*/
  fgets((char *)(syslogdname), 1000, (FILE *)f);
  /*sid:140*/
  /*T(syslogdname) = T*/
  
  /*sid:141*/
  fgets((char *)(sysloginfo), 1000, (FILE *)f);
  /*sid:141*/
  /*T(sysloginfo) = T*/
  
  /*sid:142*/
  fclose(f);
  /*sid:143*/
  nsp = create_databuf_list(2);
  /*sid:143*/
  /*T(nsp) = G(argc)*/
  
  /*sid:144*/
  nslookup(nsp, (char const   *)(syslogdname), (char const   *)(sysloginfo));
  /*sid:144*/
  /*T(zones) = T*/
  /*T(nsa) = T*/
  /*T(complaint) = T*/
  /*T(complaint_0) = T*/
  /*T(complaint_1) = T*/
  
  /*sid:145*/
  __retres = 0;
  /*sid:145*/
  /*T(__retres) = G(argc)*/
  
  /*sid:147*/
  return (__retres);
  /*sid:147*/
  /*T(main) = G(argc)*/
  }

}
